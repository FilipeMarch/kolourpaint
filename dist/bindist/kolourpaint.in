#!/bin/sh
#
# This is the wrapper script for KolourPaint.
#
# TODO: sync with README; single click; if in compressed
#
# If you are reading this file inadvertently and wish to run KolourPaint
# instead, try one of the following in your file manager:
#
# 1. Double click on this file "kolourpaint".
# 2. Right click on this file "kolourpaint" and select "Run", "Execute" or
#    "Open".
#
# Common file managers include Konqueror, Nautilus and Explorer.  Different
# file managers work in different ways so the above options might be
# accessible using other approaches.  Mozilla is not a file manager so will
# not work.
#
# Do not select "Open With / Text Editor", "Open With / KWrite" or other
# options with similar names.  Else, you will end up reading this file
# again.
#
# If you are still having trouble, please email
# <kolourpaint-support@lists.sourceforge.net> for free and friendly
# technical support.
#
# Thank you for trying KolourPaint.
# http://kolourpaint.sourceforge.net/
#


echo KolourPaint %VER% Binary Release \#%BIN_RELEASE%
echo


# You need --canonicalize in case "l" links to "m" which links to
# "kolourpaint" - all in different directories.  Without it, we would
# be looking in the directory of "m" for our files and the files won't be
# there.
#
# It also returns an absolute path (which is nice) and works even for
# non-symlinks (which is even nicer).
echo -n Detecting wrapper location ..." "
if OURSELF="`readlink --canonicalize "$0"`" &&
   OUR_DIRECTORY="`dirname "$OURSELF"`"
then
    echo OK
else
    echo FAIL
    echo
    echo Unexpected error: could not determine wrapper location.
    echo For support, email "<kolourpaint-support@lists.sourceforge.net>".
    echo
    exit 1
fi


KDE_CONFIG_BIN="`type -P kde-config 2>/dev/null`"
echo -n Checking for kde-config \($KDE_CONFIG_BIN\) ..." "
if [ -z "$KDE_CONFIG_BIN" ] || [ ! -x "$KDE_CONFIG_BIN" ]
then
    echo FAIL

    echo
    echo "KolourPaint requires KDE 3.x."
    echo
    exit 1
fi
echo OK


# Stolen from startkde 3.3
echo -n Finding KDE settings folder ..." "
kdehome=$HOME/.kde
test -n "$KDEHOME" && kdehome=`echo "$KDEHOME"|sed "s,^~/,$HOME/,"`
KDEHOME_DELETE=
echo $kdehome


echo


# An unanswered email tells all:
#
# ~~~~
# Subject: kdelibs/kdeui/kxmlguiclient.cpp r1.49
# From: Clarence Dang <dang AT kde DOT org>
# To: hausmann AT kde DOT org
# Date: 2005-02-14 22:00
#
# Hi,
#
# --- kxmlguiclient.cpp   8 Apr 2001 21:57:37 -0000       1.48
# +++ kxmlguiclient.cpp   26 Apr 2001 15:54:12 -0000      1.49
# +      else
# +      {
# +        QString f = (*local).file;
# +        QString backup = f + QString::fromLatin1( ".backup" );
# +        QDir dir;
# +        dir.rename( f, backup );
# +      }
#
# Why should KDE rename .rc files at all?
#
#
# The reason I ask is:
#
# * I have the CVS HEAD [now SVN trunk] version of kolourpaint (and its
#   kolourpaintui.rc) installed in $KDEDIR
#
# * http://kolourpaint.sourceforge.net/cgi-bin/redirect?id=download-1.2.2_kde3-3bin.tar.bz2
#   [934KB] is a self-contained version of KolourPaint with its own directory
#   structure because it plays with $KDEDIRS
#
# * If I unpack and run this, because it has an older version of
#   kolourpaintui.rc than the one in $KDEDIR, it gets renamed to
#   kolourpaintui.rc.backup
#
#
# This results in:
#
# 1. The $KDEDIR kolourpaintui.rc being picked up instead of the correct 
# $KDEDIRS kolourpaintui.rc
#
# 2. Due to 1, if the KolourPaint in $KDEDIR is uninstalled, this self-contained 
# package won't work anymore since it only has the file kolourpaintui.rc.backup
#
#
# This is not good for 3rd party KDE software.
#
#
# Thanks,
# Clarence
# ~~~~
#
#
# Solution: Find all kolourpaintui.rc's that KDE can see and create a
#   kolourpaintui.rc that has a bigger version number than all of them.
#
#   We try 2 approaches to increase the chance of success:
#
#   1. [probably a user install of kolourpaint]
#      We overwrite "share/apps/kolourpaint/kolourpaintui.rc" with the new
#      kolourpaintui.rc.  In case, it's not overwriteable (e.g. global
#      install), the default "share/apps/kolourpaint/kolourpaintui.rc"
#      comes with a large version number.
#
#   2. [probably a global install of kolourpaint]
#      We create in $kdehome.  Bad because it affects other running
#      versions of KolourPaint (unlikely use case though).  Doesn't work
#      with read-only home directory.
#
# This won't always work but in the worst case, we end up using the global
# version of kolourpaintui.rc which will only result in a slightly stuffed
# menu structure.  And this is immune from $KDEDIR being uninstalled and only
# having kolourpaintui.rc.backup (see we always try to regenreate kolourpaintui.rc).

echo -n Discovering user interface version ..." "

OLDIFS="$IFS"
IFS=:

largest=1000000
for d in `kde-config --path data`
do
    if [ -f "$d/kolourpaint/kolourpaintui.rc" ]
    then
        val=$((`grep version= "$d/kolourpaint/kolourpaintui.rc" | cut -d\" -f4` + 1))
        if [ $val -gt $largest ]
        then
            largest=$val
        fi
        echo -n "$d($(($val-1))) "
    fi
done

IFS="$OLDIFS"
echo "--> $largest"


# Atomic
function generate_kolourpaintui_rc ()
{
    sed -e "s/%VERSION%/$largest/g" "$OUR_DIRECTORY/share/apps/kolourpaint/kolourpaintui.rc.in" > "$1.temp" &&
    mv "$1.temp" "$1"
}

echo -n Generating user interface "$OUR_DIRECTORY/share/apps/kolourpaint/kolourpaintui.rc" ..." "
if generate_kolourpaintui_rc "$OUR_DIRECTORY/share/apps/kolourpaint/kolourpaintui.rc"
then
    echo OK
else
    # We tried and failed, but maybe we will still use a reasonable kolourpaintui.rc
    echo FAIL
fi

echo -n Generating user interface "$kdehome/share/apps/kolourpaint/kolourpaintui.rc" ..." "
if mkdir -p "$kdehome/share/apps/kolourpaint/" &&
generate_kolourpaintui_rc "$kdehome/share/apps/kolourpaint/kolourpaintui.rc" &&
KDEHOME_TEMP="$KDEHOME_TEMP share/apps/kolourpaint/kolourpaintui.rc"
then
    echo OK
else
    # We tried and failed, but maybe we will still use a reasonable kolourpaintui.rc
    echo FAIL
fi


echo


# kio_help is invoked by kioslave (with kioslave's environment), which will
# probably not contain our KDEDIRS, hence docs won't work.  The claim is
# that KDEDIRS is only totally picked up with a KDE restart but it is
# impractical to say "You must restart KDE for KolourPaint to work".
#
# We have a few choices:
#
# 1. Make a symlink to our docs in $KDEHOME: Works because $KDEHOME is
#    always searched by KDE.  Bad because it won't work on readonly system
#    (not really an issue but...) and messes with the user's home
#    directory (only an issue if the user starts putting his/her custom
#    KolourPaint documentation there which is highly unlikely).
#    [summary: messes with home directory]
#
# 2. "dcop klauncher default setLaunchEnv": Requires klauncher to be
#    running or we'll have to invoke it.  Replaces, rather than appending
#    to, environment variable - impossible to restore properly without a
#    "getLaunchEnv" call (which doesn't exist).
#    [summary: may stuff up environment permanently]
#
# 3. Restart kdeinit with "KDEDIRS=$OUR_DIRECTORY:$KDEDIRS kdeinit": Too
#    slow.  Performance penalty on startup is awful; not to mention that
#    it'll need to be run again on kolourpaint exit to restore environment.
#    [summary: slow]
#
# All of the above solutions affect the environment for any apps started
# while this script is active :(
#
# Solution Chosen: #1
#

# Note that lack of spaces to prevent problems.
# Second one needed because Debian tries to be clever.
DOC_LINK_DIRS="share/doc/HTML/en share/doc/kde/HTML/en"
for link_dir in $DOC_LINK_DIRS
do
    DOC_LINK="$kdehome/$link_dir/kolourpaint"
    
    # (if this fails, all the user loses is the docs - no need to abort)
    echo -n Setting up HTML docs symlink $DOC_LINK ..." "

    if ! mkdir -p "$kdehome/$link_dir"
    then
        echo Could not create "$kdehome/$link_dir"
    else
        if [ -L "$DOC_LINK" ]
        then
            # Sigh :(
            if ! rm -f "$DOC_LINK"
            then
                echo $DOC_LINK already exists as a link but cannot be deleted
                unset DOC_LINK
            fi
        elif [ -e "$DOC_LINK" ]
        then
            echo $DOC_LINK already exists but is not a link
            unset DOC_LINK
        fi
            
        if [ -n "$DOC_LINK" ]
        then
            DOC_LOCATION="$OUR_DIRECTORY/share/doc/HTML/en/kolourpaint"
    
            if [ -z "`echo "$DOC_LOCATION" | egrep "^/"`" ]
            then
                DOC_LOCATION="$PWD/$DOC_LOCATION"
            fi
            
            if ! ln -s "$DOC_LOCATION" "$DOC_LINK"
            then
                echo Could not create $DOC_LINK
                unset DOC_LINK
            else
                echo OK
            fi
        fi
        
        [ "$DOC_LINK" ] && KDEHOME_TEMP="$KDEHOME_TEMP $link_dir/kolourpaint"
    fi
done


echo


echo -n Detecting C++ ABI ..." "
# Favour newest ABI (performance, correctness, updated etc.)
if [ -f /usr/lib/libstdc++.so.6 ]
then
    echo gcc3.4
    OUR_BIN="$OUR_DIRECTORY/gcc3_4-abi/kolourpaint"
elif [ -f /usr/lib/libstdc++.so.5 ]
then
    echo gcc3.2
    OUR_BIN="$OUR_DIRECTORY/gcc3_2-abi/kolourpaint"
else
    echo Unknown - using gcc3.4 ABI and praying
    OUR_BIN="$OUR_DIRECTORY/gcc3_4-abi/kolourpaint"
fi


function delete_kdehome_temp ()
{
    echo
    echo Cleaning up:
    
    # TODO:
    # This is not perfect.  Race conditions.  Also if user is running
    # 2 different versions of the KolourPaint bin packages at the same
    # time - NUM_BIN_INST doesn't account for this.  Also after exiting
    # KolourPaint, might still have KHelpCenter open.
    
    NUM_BIN_INST="`ps w |
        fgrep "$OUR_BIN" | fgrep -v "fgrep $OUR_BIN" |
        wc -l`"
        
    # User may request help in running instances.  So only delete doc
    # symlink if no running instance.
    if [ "$NUM_BIN_INST" != 0 ]
    then
        echo "  Leaving last KolourPaint process to clean up"
        return
    fi
    
    for f in $KDEHOME_TEMP
    do
        echo "  $kdehome/$f"
        rm -f "$kdehome/$f"
    done
}


echo -n Adding $OUR_DIRECTORY to KDEDIRS=$KDEDIRS ..." "
export KDEDIRS="$OUR_DIRECTORY:$KDEDIRS"
echo OK


echo


echo Starting KolourPaint ...
if ! "$OUR_BIN" "$@"
then
    delete_kdehome_temp
    
    echo
    
    # Check for KDE >= 3.0.  Therefore when you create $OUR_BIN you must
    # link it against KDE 3.0 (not > 3.0) else this check is bogus.
    #
    # kde-config is rather slow - we only use it to check KDE ver at the
    # moment ...
    #
    # So _only_ run it as a diagnostic if kolourpaint aborts.  There is
    # no need to run it before the kolourpaint bin - it only slows startup.
    echo -n Checking for KDE 3.x ..." "
    if [ ! -z "`kde-config --version | egrep ^KDE:\ 3\\.`" ]
    then
        echo Yes
    
        # Qt 3.0.5 has new ABI by accident and we (and most distros)
        # support it instead of e.g. Qt 3.0.4.  We still let them run
        # with Qt 3.0.4 at their own risk but if it fails, we do this
        # test.
        #
        # ASSUMPTION: If have KDE 3.x, then have Qt 3.x.
        echo -n 'Checking for Qt 3 (Qt >= 3.0.5) ... '
        if [ ! -z "`kde-config --version | egrep '^Qt: 3\.([^0]|0\.[5-9])'`" ]
        then
            echo Yes

            echo
            
            uname -a
            echo $OUR_BIN
            ldd "$OUR_BIN"
            
            echo
            echo If KolourPaint aborted unexpectedly, email all of the above messages to
            echo "<kolourpaint-support@lists.sourceforge.net>" for support.
        else
            echo FAIL

            echo
            echo "KolourPaint requires Qt 3 (>= 3.0.5)."
        fi
    else
        echo FAIL
        
        echo
        echo "KolourPaint requires KDE 3.x."
    fi

    
    echo
    exit 1
fi
  

delete_kdehome_temp

echo
