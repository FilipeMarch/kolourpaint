BEGIN
* Support bkspace/deletion of entire words with CTRL+Backspace/CTRL+Del

* Backend: kpToolText:
  - add setAllCommandPointersToZero()
  - add addNew{Backspace,Delete}Command()
  - add m_backspaceWordCommand and m_deleteWordCommand (same as
    m_backspaceCommand and m_deleteCommand but for CTRL+)
  - add cursorIsOnWordChar()
  - add cursorIsAtStart(),cursorIsAtEnd()
  - add moveCursorLeft(),moveCursorRight()
  - add moveCursorToWordStart(),moveCursorToNextWordStart()
  - add option to not automatically call add{Enter,Backspace,Delete}()
    to the ctors of kpToolText{Enter,Backspace,Delete}Command
  - style
  
* kpmainwindow_tools.cpp: fix warning
END

diff -U10 -dpr -x'*~' -x'*.o' -x'.*.sw*' -x'*.a' -x'*.la' -x'*.moc' -xk -xkolourpaintversion.h -xMakefile.in -xMakefile -x.deps -x kolourpaintlicense.h -x config.log base/kolourpaint/kpmainwindow_edit.cpp head/kolourpaint/kpmainwindow_edit.cpp
--- base/kolourpaint/kpmainwindow_edit.cpp	2005-02-03 12:00:18.000000000 +1100
+++ head/kolourpaint/kpmainwindow_edit.cpp	2005-06-22 17:12:35.000000000 +1000
@@ -419,20 +419,21 @@ void kpMainWindow::pasteText (const QStr
 
         for (int i = 0; i < (int) textLines.size (); i++)
         {
             if (i > 0)
             {
                 macroCmd->addCommand (
                     new kpToolTextEnterCommand (
                         QString::null/*uninteresting child of macroCmd*/,
                         m_viewManager->textCursorRow (),
                         m_viewManager->textCursorCol (),
+                        kpToolTextEnterCommand::AddEnterNow,
                         this));
             }
 
             macroCmd->addCommand (
                 new kpToolTextInsertCommand (
                     QString::null/*uninteresting child of macroCmd*/,
                     m_viewManager->textCursorRow (),
                     m_viewManager->textCursorCol (),
                     textLines [i],
                     this));
diff -U10 -dpr -x'*~' -x'*.o' -x'.*.sw*' -x'*.a' -x'*.la' -x'*.moc' -xk -xkolourpaintversion.h -xMakefile.in -xMakefile -x.deps -x kolourpaintlicense.h -x config.log base/kolourpaint/kpmainwindow_tools.cpp head/kolourpaint/kpmainwindow_tools.cpp
--- base/kolourpaint/kpmainwindow_tools.cpp	2005-02-02 22:11:25.000000000 +1100
+++ head/kolourpaint/kpmainwindow_tools.cpp	2005-06-22 16:48:58.000000000 +1000
@@ -552,20 +552,22 @@ void kpMainWindow::slotEndedDocResize (c
 #undef DOC_RESIZE_COMPLETED
 }
 
 // private slot
 void kpMainWindow::slotDocResizeMessageChanged (const QString &string)
 {
 #if DEBUG_KP_MAIN_WINDOW
     kdDebug () << "kpMainWindow::slotDocResizeMessageChanged(" << string
                << ") docResizeToBeCompleted=" << m_docResizeToBeCompleted
                << endl;
+#else
+    (void) string;
 #endif
 
     if (m_docResizeToBeCompleted)
         return;
 
     recalculateStatusBarMessage ();
 }
 
 
 // private slot
diff -U10 -dpr -x'*~' -x'*.o' -x'.*.sw*' -x'*.a' -x'*.la' -x'*.moc' -xk -xkolourpaintversion.h -xMakefile.in -xMakefile -x.deps -x kolourpaintlicense.h -x config.log base/kolourpaint/tools/kptooltext.cpp head/kolourpaint/tools/kptooltext.cpp
--- base/kolourpaint/tools/kptooltext.cpp	2005-02-02 22:36:48.000000000 +1100
+++ head/kolourpaint/tools/kptooltext.cpp	2005-06-22 18:39:42.000000000 +1000
@@ -53,35 +53,46 @@ kpToolText::kpToolText (kpMainWindow *ma
       m_IMStartCursorCol (0),
       m_IMPreeditStr (0)
 {
 }
 
 kpToolText::~kpToolText ()
 {
 }
 
 
+// protected
+void kpToolText::setAllCommandPointersToZero ()
+{
+    m_insertCommand = 0;
+    m_enterCommand = 0;
+    
+    m_backspaceCommand = 0;
+    m_backspaceWordCommand = 0;
+    
+    m_deleteCommand = 0;
+    m_deleteWordCommand = 0;
+}
+
+
 // public virtual [base kpToolSelection]
 void kpToolText::begin ()
 {
 #if DEBUG_KP_TOOL_TEXT && 1
     kdDebug () << "kpToolText::begin()" << endl;
 #endif
 
     mainWindow ()->enableTextToolBarActions (true);
     viewManager ()->setTextCursorEnabled (true);
 
-    m_insertCommand = 0;
-    m_enterCommand = 0;
-    m_backspaceCommand = 0;
-    m_deleteCommand = 0;
-
+    setAllCommandPointersToZero ();
+    
     kpToolSelection::begin ();
 }
 
 // public virtual [base kpToolSelection]
 void kpToolText::end ()
 {
 #if DEBUG_KP_TOOL_TEXT && 1
     kdDebug () << "kpToolText::end()" << endl;
 #endif
 
@@ -91,72 +102,242 @@ void kpToolText::end ()
     mainWindow ()->enableTextToolBarActions (false);
 }
 
 
 // public
 bool kpToolText::hasBegunText () const
 {
     return (m_insertCommand ||
             m_enterCommand ||
             m_backspaceCommand ||
-            m_deleteCommand);
+            m_backspaceWordCommand ||
+            m_deleteCommand ||
+            m_deleteWordCommand);
 }
 
 // public virtual [base kpTool]
 bool kpToolText::hasBegunShape () const
 {
     return (hasBegunDraw () || hasBegunText ());
 }
 
 
 // public virtual [base kpToolSelection]
 void kpToolText::cancelShape ()
 {
 #if DEBUG_KP_TOOL_TEXT
     kdDebug () << "kpToolText::cancelShape()" << endl;
 #endif
 
     if (m_dragType != Unknown)
         kpToolSelection::cancelShape ();
     else if (hasBegunText ())
     {
-        m_insertCommand = 0;
-        m_enterCommand = 0;
-        m_backspaceCommand = 0;
-        m_deleteCommand = 0;
+        setAllCommandPointersToZero ();
 
         commandHistory ()->undo ();
     }
     else
         kpToolSelection::cancelShape ();
 }
 
 // public virtual [base kpTool]
 void kpToolText::endShape (const QPoint &thisPoint, const QRect &normalizedRect)
 {
 #if DEBUG_KP_TOOL_TEXT
     kdDebug () << "kpToolText::endShape()" << endl;
 #endif
 
     if (m_dragType != Unknown)
         kpToolSelection::endDraw (thisPoint, normalizedRect);
     else if (hasBegunText ())
-    {
-        m_insertCommand = 0;
-        m_enterCommand = 0;
-        m_backspaceCommand = 0;
-        m_deleteCommand = 0;
-    }
+        setAllCommandPointersToZero ();
     else
         kpToolSelection::endDraw (thisPoint, normalizedRect);
 }
 
+    
+// protected static
+bool kpToolText::cursorIsOnWordChar (const QValueVector <QString> &textLines,
+    int cursorRow, int cursorCol)
+{
+    return (cursorRow >= 0 && cursorRow < (int) textLines.size () &&
+            cursorCol >= 0 && cursorCol < (int) textLines [cursorRow].length () &&
+            !textLines [cursorRow][cursorCol].isSpace ());
+}
+
+
+// protected static
+bool kpToolText::cursorIsAtStart (const QValueVector <QString> &,
+    int cursorRow, int cursorCol)
+{
+    return (cursorRow == 0 && cursorCol == 0);
+}
+
+// protected static
+bool kpToolText::cursorIsAtEnd (const QValueVector <QString> &textLines,
+    int cursorRow, int cursorCol)
+{
+    return (cursorRow == (int) textLines.size () - 1 &&
+            cursorCol == (int) textLines [cursorRow].length ());
+}
+
+
+// protected static
+void kpToolText::moveCursorLeft (const QValueVector <QString> &textLines,
+    int *cursorRow, int *cursorCol)
+{
+    (*cursorCol)--;
+
+    if (*cursorCol < 0)
+    {
+        (*cursorRow)--;
+        if (*cursorRow < 0)
+        {
+            *cursorRow = 0;
+            *cursorCol = 0;
+        }
+        else
+            *cursorCol = textLines [*cursorRow].length ();
+    }
+}
+
+// protected static
+void kpToolText::moveCursorRight (const QValueVector <QString> &textLines,
+    int *cursorRow, int *cursorCol)
+{
+    (*cursorCol)++;                                            
+                                                            
+    if (*cursorCol > (int) textLines [*cursorRow].length ())
+    {                                                       
+        (*cursorRow)++;                                        
+        if (*cursorRow > (int) textLines.size () - 1)        
+        {                                                   
+            *cursorRow = textLines.size () - 1;              
+            *cursorCol = textLines [*cursorRow].length ();    
+        }                                                   
+        else                                                
+            *cursorCol = 0;                                  
+    }                                                       
+}
+
+
+#define IS_ON_SPACE_OR_EOL() !cursorIsOnWordChar (textLines, *cursorRow, *cursorCol)
+        
+// protected static
+int kpToolText::moveCursorToWordStart (const QValueVector <QString> &textLines,
+    int *cursorRow, int *cursorCol)
+{
+    int numMoves = 0;
+    
+#define IS_ON_ANCHOR()                                            \
+    (cursorIsOnWordChar (textLines, *cursorRow, *cursorCol) &&    \
+         (cursorCol == 0 ||                                       \
+             !cursorIsOnWordChar (textLines, *cursorRow, *cursorCol - 1)))
+#define MOVE_CURSOR_LEFT()    \
+    (moveCursorLeft (textLines, cursorRow, cursorCol), ++numMoves)
+    
+                        
+    // (these comments will exclude the row=0,col=0 boundary case)
+
+    if (IS_ON_ANCHOR ())
+        MOVE_CURSOR_LEFT ();
+
+    // --- now we're not on an anchor point (start of word) ---
+
+    // End up on a letter...
+    while (!(*cursorRow == 0 && *cursorCol == 0) &&
+            (IS_ON_SPACE_OR_EOL ()))
+    {
+        MOVE_CURSOR_LEFT ();
+    }
+
+    // --- now we're on a letter ---
+
+    // Find anchor point
+    while (!(*cursorRow == 0 && *cursorCol == 0) && !IS_ON_ANCHOR ())
+    {
+        MOVE_CURSOR_LEFT ();
+    }
+
+    
+#undef IS_ON_ANCHOR
+#undef MOVE_CURSOR_LEFT
+
+    return numMoves;
+}
+
+// protected static
+int kpToolText::moveCursorToNextWordStart (const QValueVector <QString> &textLines,
+    int *cursorRow, int *cursorCol)
+{
+    int numMoves = 0;
+    
+#define IS_AT_END() cursorIsAtEnd (textLines, *cursorRow, *cursorCol)
+#define MOVE_CURSOR_RIGHT()    \
+    (moveCursorRight (textLines, cursorRow, cursorCol), ++numMoves)
+
+    
+    // (these comments will exclude the last row,end col boundary case)
+
+    // Find space
+    while (!IS_AT_END () && !IS_ON_SPACE_OR_EOL ())
+    {
+        MOVE_CURSOR_RIGHT ();
+    }
+
+    // --- now we're on a space ---
+
+    // Find letter
+    while (!IS_AT_END () && IS_ON_SPACE_OR_EOL ())
+    {
+        MOVE_CURSOR_RIGHT ();
+    }
+
+    // --- now we're on a letter ---
+
+    
+#undef IS_AT_END
+#undef MOVE_CURSOR_RIGHT
+
+    return numMoves;
+}
+
+#undef IS_ON_SPACE_OR_EOL
+
+
+// protected
+void kpToolText::addNewBackspaceCommand (kpToolTextBackspaceCommand **cmd)
+{
+    if (hasBegunShape ())
+        endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
+    
+    *cmd = new kpToolTextBackspaceCommand (i18n ("Text: Backspace"),
+                viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
+                kpToolTextBackspaceCommand::DontAddBackspaceYet,
+                mainWindow ());
+    commandHistory ()->addCommand (*cmd, false/*no exec*/);
+}
+
+// protected
+void kpToolText::addNewDeleteCommand (kpToolTextDeleteCommand **cmd)
+{
+    if (hasBegunShape ())
+        endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
+
+    *cmd = new kpToolTextDeleteCommand (i18n ("Text: Delete"),
+                viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
+                kpToolTextDeleteCommand::DontAddDeleteYet,
+                mainWindow ());
+    commandHistory ()->addCommand (*cmd, false/*no exec*/);
+}
+
 
 // protected virtual [base kpTool]
 void kpToolText::keyPressEvent (QKeyEvent *e)
 {
 #if DEBUG_KP_TOOL_TEXT
     kdDebug () << "kpToolText::keyPressEvent(e->text='" << e->text () << "')" << endl;
 #endif
 
 
     e->ignore ();
@@ -185,81 +366,112 @@ void kpToolText::keyPressEvent (QKeyEven
         kpToolSelection::keyPressEvent (e);
         return;
     }
 
 
     const QValueVector <QString> textLines = sel->textLines ();
     int cursorRow = viewManager ()->textCursorRow ();
     int cursorCol = viewManager ()->textCursorCol ();
 
 
-#define IS_SPACE(c) ((c).isSpace () || (c).isNull ())
     if (e->key () == Qt::Key_Enter || e->key () == Qt::Key_Return)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\tenter pressed" << endl;
     #endif
         if (!m_enterCommand)
         {
             // TODO: why not endShapeInternal(); ditto for everywhere else in this file?
             if (hasBegunShape ())
                 endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
 
             m_enterCommand = new kpToolTextEnterCommand (i18n ("Text: New Line"),
                 viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
+                kpToolTextEnterCommand::AddEnterNow,
                 mainWindow ());
             commandHistory ()->addCommand (m_enterCommand, false/*no exec*/);
         }
         else
             m_enterCommand->addEnter ();
 
         e->accept ();
     }
     else if (e->key () == Qt::Key_Backspace)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\tbackspace pressed" << endl;
     #endif
 
-        if (!m_backspaceCommand)
+        if ((e->state () & Qt::ControlButton) == 0)
         {
-            if (hasBegunShape ())
-                endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
+            if (!m_backspaceCommand)
+                addNewBackspaceCommand (&m_backspaceCommand);
 
-            m_backspaceCommand = new kpToolTextBackspaceCommand (i18n ("Text: Backspace"),
-                viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
-                mainWindow ());
-            commandHistory ()->addCommand (m_backspaceCommand, false/*no exec*/);
+            m_backspaceCommand->addBackspace ();
         }
         else
-            m_backspaceCommand->addBackspace ();
+        {
+            if (!m_backspaceWordCommand)
+                addNewBackspaceCommand (&m_backspaceWordCommand);
+                
+            const int numMoves = moveCursorToWordStart (textLines,
+                &cursorRow, &cursorCol);
+                
+            viewManager ()->setQueueUpdates ();
+            {
+                for (int i = 0; i < numMoves; i++)
+                    m_backspaceWordCommand->addBackspace ();
+            }
+            viewManager ()->restoreQueueUpdates ();
+                
+            Q_ASSERT (cursorRow == viewManager ()->textCursorRow ());
+            Q_ASSERT (cursorCol == viewManager ()->textCursorCol ());
+        }
 
         e->accept ();
     }
     else if (e->key () == Qt::Key_Delete)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\tdelete pressed" << endl;
     #endif
 
-        if (!m_deleteCommand)
+        if ((e->state () & Qt::ControlButton) == 0)
         {
-            if (hasBegunShape ())
-                endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
-
-            m_deleteCommand = new kpToolTextDeleteCommand (i18n ("Text: Delete"),
-                viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
-                mainWindow ());
-            commandHistory ()->addCommand (m_deleteCommand, false/*no exec*/);
+            if (!m_deleteCommand)
+                addNewDeleteCommand (&m_deleteCommand);
+                
+            m_deleteCommand->addDelete ();
         }
         else
-            m_deleteCommand->addDelete ();
+        {
+            if (!m_deleteWordCommand)
+                addNewDeleteCommand (&m_deleteWordCommand);
+                
+            // We don't want to know the cursor pos of the next word start
+            // as delete should keep cursor in same pos.
+            int cursorRowThrowAway = cursorRow,
+                cursorColThrowAway = cursorCol;
+            const int numMoves = moveCursorToNextWordStart (textLines,
+                &cursorRowThrowAway, &cursorColThrowAway);
+                
+            viewManager ()->setQueueUpdates ();
+            {
+                for (int i = 0; i < numMoves; i++)
+                    m_deleteWordCommand->addDelete ();
+            }
+            viewManager ()->restoreQueueUpdates ();
+                
+            // Assert unchanged as delete should keep cursor in same pos.
+            Q_ASSERT (cursorRow == viewManager ()->textCursorRow ());
+            Q_ASSERT (cursorCol == viewManager ()->textCursorCol ());
+        }
 
         e->accept ();
     }
     else if (e->key () == Qt::Key_Up)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\tup pressed" << endl;
     #endif
 
         if (hasBegunShape ())
@@ -291,154 +503,74 @@ void kpToolText::keyPressEvent (QKeyEven
         }
 
         e->accept ();
     }
     else if (e->key () == Qt::Key_Left)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\tleft pressed" << endl;
     #endif
 
-    #define MOVE_CURSOR_LEFT()                                \
-    {                                                         \
-        cursorCol--;                                          \
-                                                              \
-        if (cursorCol < 0)                                    \
-        {                                                     \
-            cursorRow--;                                      \
-            if (cursorRow < 0)                                \
-            {                                                 \
-                cursorRow = 0;                                \
-                cursorCol = 0;                                \
-            }                                                 \
-            else                                              \
-                cursorCol = textLines [cursorRow].length ();  \
-        }                                                     \
-    }
-
         if (hasBegunShape ())
             endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
 
         if ((e->state () & Qt::ControlButton) == 0)
         {
         #if DEBUG_KP_TOOL_TEXT
             kdDebug () << "\tmove single char" << endl;
         #endif
 
-            MOVE_CURSOR_LEFT ();
+            moveCursorLeft (textLines, &cursorRow, &cursorCol);
             viewManager ()->setTextCursorPosition (cursorRow, cursorCol);
         }
         else
         {
         #if DEBUG_KP_TOOL_TEXT
             kdDebug () << "\tmove to start of word" << endl;
         #endif
 
-            // (these comments will exclude the row=0,col=0 boundary case)
-
-        #define IS_ON_ANCHOR() (!IS_SPACE (textLines [cursorRow][cursorCol]) &&                     \
-                                (cursorCol == 0 || IS_SPACE (textLines [cursorRow][cursorCol - 1])))
-            if (IS_ON_ANCHOR ())
-                MOVE_CURSOR_LEFT ();
-
-            // --- now we're not on an anchor point (start of word) ---
-
-            // End up on a letter...
-            while (!(cursorRow == 0 && cursorCol == 0) &&
-                   (IS_SPACE (textLines [cursorRow][cursorCol])))
-            {
-                MOVE_CURSOR_LEFT ();
-            }
-
-            // --- now we're on a letter ---
-
-            // Find anchor point
-            while (!(cursorRow == 0 && cursorCol == 0) && !IS_ON_ANCHOR ())
-            {
-                MOVE_CURSOR_LEFT ();
-            }
-
-        #undef IS_ON_ANCHOR
-
+            moveCursorToWordStart (textLines, &cursorRow, &cursorCol);
             viewManager ()->setTextCursorPosition (cursorRow, cursorCol);
         }
 
     #undef MOVE_CURSOR_LEFT
 
         e->accept ();
 
     }
     else if (e->key () == Qt::Key_Right)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\tright pressed" << endl;
     #endif
 
-    #define MOVE_CURSOR_RIGHT()                                 \
-    {                                                           \
-        cursorCol++;                                            \
-                                                                \
-        if (cursorCol > (int) textLines [cursorRow].length ())  \
-        {                                                       \
-            cursorRow++;                                        \
-            if (cursorRow > (int) textLines.size () - 1)        \
-            {                                                   \
-                cursorRow = textLines.size () - 1;              \
-                cursorCol = textLines [cursorRow].length ();    \
-            }                                                   \
-            else                                                \
-                cursorCol = 0;                                  \
-        }                                                       \
-    }
-
         if (hasBegunShape ())
             endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
 
         if ((e->state () & Qt::ControlButton) == 0)
         {
         #if DEBUG_KP_TOOL_TEXT
             kdDebug () << "\tmove single char" << endl;
         #endif
 
-            MOVE_CURSOR_RIGHT ();
+            moveCursorRight (textLines, &cursorRow, &cursorCol);
             viewManager ()->setTextCursorPosition (cursorRow, cursorCol);
         }
         else
         {
         #if DEBUG_KP_TOOL_TEXT
-            kdDebug () << "\tmove to start of word" << endl;
+            kdDebug () << "\tmove to start of next word" << endl;
         #endif
 
-            // (these comments will exclude the last row,end col boundary case)
-
-        #define IS_AT_END() (cursorRow == (int) textLines.size () - 1 &&   \
-                             cursorCol == (int) textLines [cursorRow].length ())
-
-            // Find space
-            while (!IS_AT_END () && !IS_SPACE (textLines [cursorRow][cursorCol]))
-            {
-                MOVE_CURSOR_RIGHT ();
-            }
-
-            // --- now we're on a space ---
-
-            // Find letter
-            while (!IS_AT_END () && IS_SPACE (textLines [cursorRow][cursorCol]))
-            {
-                MOVE_CURSOR_RIGHT ();
-            }
-
-            // --- now we're on a letter ---
-
+            moveCursorToNextWordStart (textLines, &cursorRow, &cursorCol);
             viewManager ()->setTextCursorPosition (cursorRow, cursorCol);
 
-        #undef IS_AT_END
         }
 
     #undef MOVE_CURSOR_RIGHT
 
         e->accept ();
     }
     else if (e->key () == Qt::Key_Home)
     {
     #if DEBUG_KP_TOOL_TEXT
         kdDebug () << "\thome pressed" << endl;
@@ -556,22 +688,23 @@ void kpToolText::imComposeEvent (QIMEven
         // set cursor at the start input point
         viewManager ()->setTextCursorPosition (m_IMStartCursorRow, m_IMStartCursorCol);
         for (unsigned int i = 0; i < m_IMPreeditStr.length(); i++)
         {
             if (!m_deleteCommand)
             {
                 if (hasBegunShape ())
                     endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
                 
                 m_deleteCommand = new kpToolTextDeleteCommand (i18n ("Text: Delete"),
-                                                               viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
-                                                               mainWindow ());
+                    viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
+                    kpToolTextDeleteCommand::AddDeleteNow,
+                    mainWindow ());
                 commandHistory ()->addCommand (m_deleteCommand, false/*no exec*/);
             }
             else
                 m_deleteCommand->addDelete ();
         }
     }
     
     // insert new preedit
     m_IMPreeditStr = e->text();
     if (m_IMPreeditStr.length() > 0)
@@ -615,22 +748,24 @@ void kpToolText::imEndEvent (QIMEvent *e
         // set cursor at the start input point
         viewManager ()->setTextCursorPosition (m_IMStartCursorRow, m_IMStartCursorCol);
         for (unsigned int i = 0; i < m_IMPreeditStr.length(); i++)
         {
             if (!m_deleteCommand)
             {
                 if (hasBegunShape ())
                     endShape (m_currentPoint, QRect (m_startPoint, m_currentPoint).normalize ());
                 
                 m_deleteCommand = new kpToolTextDeleteCommand (i18n ("Text: Delete"),
-                                                               viewManager ()->textCursorRow (), viewManager ()->textCursorCol (),
-                                                               mainWindow ());
+                    viewManager ()->textCursorRow (),
+                    viewManager ()->textCursorCol (),
+                    kpToolTextDeleteCommand::AddDeleteNow,
+                    mainWindow ());
                 commandHistory ()->addCommand (m_deleteCommand, false/*no exec*/);
             }
             else
                 m_deleteCommand->addDelete ();
         }
     }
     m_IMPreeditStr = QString::null;
 
     // commit string
     QString inputStr = e->text();
@@ -790,20 +925,22 @@ void kpToolText::slotColorSimilarityChan
 // public slot
 void kpToolText::slotFontFamilyChanged (const QString &fontFamily,
                                         const QString &oldFontFamily)
 {
 #if DEBUG_KP_TOOL_TEXT
     kdDebug () << "kpToolText::slotFontFamilyChanged() new="
                << fontFamily
                << " old="
                << oldFontFamily
                << endl;
+#else
+    (void) fontFamily;
 #endif
 
     if (!shouldChangeTextStyle ())
         return;
 
     kpTextStyle newTextStyle = mainWindow ()->textStyle ();
     kpTextStyle oldTextStyle = newTextStyle;
     oldTextStyle.setFontFamily (oldFontFamily);
 
     changeTextStyle (i18n ("Text: Font"),
@@ -813,20 +950,22 @@ void kpToolText::slotFontFamilyChanged (
 
 // public slot
 void kpToolText::slotFontSizeChanged (int fontSize, int oldFontSize)
 {
 #if DEBUG_KP_TOOL_TEXT
     kdDebug () << "kpToolText::slotFontSizeChanged() new="
                << fontSize
                << " old="
                << oldFontSize
                << endl;
+#else
+    (void) fontSize;
 #endif
 
     if (!shouldChangeTextStyle ())
         return;
 
     kpTextStyle newTextStyle = mainWindow ()->textStyle ();
     kpTextStyle oldTextStyle = newTextStyle;
     oldTextStyle.setFontSize (oldFontSize);
 
     changeTextStyle (i18n ("Text: Font Size"),
@@ -1050,28 +1189,30 @@ void kpToolTextInsertCommand::unexecute 
 
     viewManager ()->setTextCursorPosition (m_row, m_col);
 }
 
 
 /*
  * kpToolTextEnterCommand
  */
 
 kpToolTextEnterCommand::kpToolTextEnterCommand (const QString &name,
-    int row, int col,
+    int row, int col, Action action,
     kpMainWindow *mainWindow)
     : kpNamedCommand (name, mainWindow),
       m_row (row), m_col (col),
       m_numEnters (0)
 {
     viewManager ()->setTextCursorPosition (m_row, m_col);
-    addEnter ();
+    
+    if (action == AddEnterNow)
+        addEnter ();
 }
 
 kpToolTextEnterCommand::~kpToolTextEnterCommand ()
 {
 }
 
 
 // public
 void kpToolTextEnterCommand::addEnter ()
 {
@@ -1144,28 +1285,30 @@ void kpToolTextEnterCommand::unexecute (
 
     viewManager ()->setTextCursorPosition (m_row, m_col);
 }
 
 
 /*
  * kpToolTextBackspaceCommand
  */
 
 kpToolTextBackspaceCommand::kpToolTextBackspaceCommand (const QString &name,
-    int row, int col,
+    int row, int col, Action action,
     kpMainWindow *mainWindow)
     : kpNamedCommand (name, mainWindow),
       m_row (row), m_col (col),
       m_numBackspaces (0)
 {
     viewManager ()->setTextCursorPosition (m_row, m_col);
-    addBackspace ();
+    
+    if (action == AddBackspaceNow)
+        addBackspace ();
 }
 
 kpToolTextBackspaceCommand::~kpToolTextBackspaceCommand ()
 {
 }
 
 
 // public
 void kpToolTextBackspaceCommand::addBackspace ()
 {
@@ -1260,28 +1403,30 @@ void kpToolTextBackspaceCommand::unexecu
 
     viewManager ()->setTextCursorPosition (m_row, m_col);
 }
 
 
 /*
  * kpToolTextDeleteCommand
  */
 
 kpToolTextDeleteCommand::kpToolTextDeleteCommand (const QString &name,
-    int row, int col,
+    int row, int col, Action action,
     kpMainWindow *mainWindow)
     : kpNamedCommand (name, mainWindow),
       m_row (row), m_col (col),
       m_numDeletes (0)
 {
     viewManager ()->setTextCursorPosition (m_row, m_col);
-    addDelete ();
+    
+    if (action == AddDeleteNow)
+        addDelete ();
 }
 
 kpToolTextDeleteCommand::~kpToolTextDeleteCommand ()
 {
 }
 
 
 // public
 void kpToolTextDeleteCommand::addDelete ()
 {
diff -U10 -dpr -x'*~' -x'*.o' -x'.*.sw*' -x'*.a' -x'*.la' -x'*.moc' -xk -xkolourpaintversion.h -xMakefile.in -xMakefile -x.deps -x kolourpaintlicense.h -x config.log base/kolourpaint/tools/kptooltext.h head/kolourpaint/tools/kptooltext.h
--- base/kolourpaint/tools/kptooltext.h	2005-02-02 22:36:48.000000000 +1100
+++ head/kolourpaint/tools/kptooltext.h	2005-06-22 18:39:44.000000000 +1000
@@ -19,54 +19,184 @@
    IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 
-#ifndef __kp_tool_text_h__
-#define __kp_tool_text_h__
+#ifndef KP_TOOL_TEXT_H
+#define KP_TOOL_TEXT_H
+
 
 #include <qstring.h>
 
 #include <kpcommandhistory.h>
-
 #include <kptextstyle.h>
 #include <kptoolselection.h>
 
+
 class kpColor;
 class kpMainWindow;
 class kpSelection;
 class kpViewManager;
 
+// (All defined below)
+class kpToolTextInsertCommand;
+class kpToolTextEnterCommand;
+class kpToolTextBackspaceCommand;
+class kpToolTextDeleteCommand;
+
+
 class kpToolText : public kpToolSelection
 {
 Q_OBJECT
 
 public:
     kpToolText (kpMainWindow *mainWindow);
     virtual ~kpToolText ();
 
     virtual bool careAboutColorsSwapped () const { return true; }
 
+protected:
+    void setAllCommandPointersToZero ();
+    
+public:
     virtual void begin ();
     virtual void end ();
 
     bool hasBegunText () const;
     virtual bool hasBegunShape () const;
     virtual void cancelShape ();
     virtual void endShape (const QPoint &thisPoint, const QRect &normalizedRect);
 
 protected:
+    /**
+     * @param textLines One or more lines of text.
+     * @param cursorRow Current row of the cursor.
+     * @param cursorCol Current column of the cursor.
+     *
+     * @returns whether the cursor is currently on a word character
+     *          (not a space).
+     */
+    static bool cursorIsOnWordChar (const QValueVector <QString> &textLines,
+        int cursorRow, int cursorCol);
+    
+        
+    /**
+     * @param textLines One or more lines of text.
+     * @param cursorRow Current row of the cursor.
+     * @param cursorCol Current column of the cursor.
+     *
+     * @returns whether the given cursor position is at the start of
+     *          textLines (on the first character of the first line)
+     *          i.e. when moveCursorLeft() won't do anything.
+     */
+    static bool cursorIsAtStart (const QValueVector <QString> &textLines,
+        int cursorRow, int cursorCol);
+        
+    /**
+     * @param textLines One or more lines of text.
+     * @param cursorRow Current row of the cursor.
+     * @param cursorCol Current column of the cursor.
+     *
+     * @returns whether the given cursor position is at the end of
+     *          textLines (after the last character of the last line)
+     *          i.e. when moveCursorRight() won't do anything.
+     */
+    static bool cursorIsAtEnd (const QValueVector <QString> &textLines,
+        int cursorRow, int cursorCol);
+
+                
+    /**
+     * Moves the given cursor position one character to the left, if
+     * this is possible (i.e. if not cursorIsAtStart()).  This may move the
+     * cursor one line up.
+     *
+     * @param textLines One or more lines of text.
+     * @param cursorRow Value-result parameter, initially containing
+     *                  the current row of the cursor and modified on
+     *                  return to indicate the new row.
+     * @param cursorCol Value-result parameter, initially containing
+     *                  the current column of the cursor and modified on
+     *                  return to indicate the new column.
+     */
+    static void moveCursorLeft (const QValueVector <QString> &textLines,
+        int *cursorRow, int *cursorCol);
+
+    /**
+     * Moves the given cursor position one character to the right, if
+     * this is possible (i.e. if not cursorIsAtEnd()).  This may move the
+     * cursor one line down.
+     *
+     * @param textLines One or more lines of text.
+     * @param cursorRow Value-result parameter, initially containing
+     *                  the current row of the cursor and modified on
+     *                  return to indicate the new row.
+     * @param cursorCol Value-result parameter, initially containing
+     *                  the current column of the cursor and modified on
+     *                  return to indicate the new column.
+     */
+    static void moveCursorRight (const QValueVector <QString> &textLines,
+        int *cursorRow, int *cursorCol);
+
+                
+    /**
+     * Moves the row and column values, representing the current cursor
+     * location, to the start of the current word.  If the cursor is
+     * on a space, it will move to the start of the previous word.
+     *
+     * This is normally used for a CTRL+Left or CTRL+Backspace behaviour.
+     *
+     * @param textLines One or more lines of text.
+     * @param cursorRow Value-result parameter, initially containing
+     *                  the current row of the cursor and modified on
+     *                  return to indicate the new row.
+     * @param cursorCol Value-result parameter, initially containing
+     *                  the current column of the cursor and modified on
+     *                  return to indicate the new column.
+     * 
+     * @returns the number of times, it <b>attempted</b> to move left.
+     *          Note: Attempting to moving left when cursorIsAtStart()
+     *                may still be counted as a move.
+     */
+    static int moveCursorToWordStart (const QValueVector <QString> &textLines,
+        int *cursorRow, int *cursorCol);
+        
+    /**
+     * Moves the row and column values, representing the current cursor
+     * location, to the start of the next word.  This is regardless of
+     * whether the cursor starts on a space or not.
+     *
+     * This is normally used for a CTRL+Right or CTRL+Delete behaviour.
+     *
+     * @param textLines One or more lines of text.
+     * @param cursorRow Value-result parameter, initially containing
+     *                  the current row of the cursor and modified on
+     *                  return to indicate the new row.
+     * @param cursorCol Value-result parameter, initially containing
+     *                  the current column of the cursor and modified on
+     *                  return to indicate the new column.
+     * 
+     * @returns the number of times, it <b>attempted</b> to move right.
+     *          Note: Attempting to moving right when cursorIsAtEnd()
+     *                may still be counted as a move.
+     */
+    static int moveCursorToNextWordStart (const QValueVector <QString> &textLines,
+        int *cursorRow, int *cursorCol);
+        
+protected:
+    void addNewBackspaceCommand (kpToolTextBackspaceCommand **cmd);
+    void addNewDeleteCommand (kpToolTextDeleteCommand **cmd);
+    
     virtual void keyPressEvent (QKeyEvent *e);
     virtual void imStartEvent (QIMEvent *e);
     virtual void imComposeEvent (QIMEvent *e);
     virtual void imEndEvent (QIMEvent *e);
 
 protected:
     bool shouldChangeTextStyle () const;
     void changeTextStyle (const QString &name,
                           const kpTextStyle &newTextStyle,
                           const kpTextStyle &oldTextStyle);
@@ -81,24 +211,24 @@ protected slots:
 
 public slots:
     void slotFontFamilyChanged (const QString &fontFamily, const QString &oldFontFamily);
     void slotFontSizeChanged (int fontSize, int oldFontSize);
     void slotBoldChanged (bool isBold);
     void slotItalicChanged (bool isItalic);
     void slotUnderlineChanged (bool isUnderline);
     void slotStrikeThruChanged (bool isStrikeThru);
 
 protected:
-    class kpToolTextInsertCommand *m_insertCommand;
-    class kpToolTextEnterCommand *m_enterCommand;
-    class kpToolTextBackspaceCommand *m_backspaceCommand;
-    class kpToolTextDeleteCommand *m_deleteCommand;
+    kpToolTextInsertCommand *m_insertCommand;
+    kpToolTextEnterCommand *m_enterCommand;
+    kpToolTextBackspaceCommand *m_backspaceCommand, *m_backspaceWordCommand;
+    kpToolTextDeleteCommand *m_deleteCommand, *m_deleteWordCommand;
 
     bool m_isIMStarted;
     int m_IMStartCursorRow;
     int m_IMStartCursorCol;
     QString m_IMPreeditStr;
 };
 
 
 class kpToolTextChangeStyleCommand : public kpNamedCommand
 {
@@ -133,71 +263,89 @@ public:
     virtual void unexecute ();
 
 protected:
     int m_row, m_col;
     QString m_newText;
 };
 
 class kpToolTextEnterCommand : public kpNamedCommand
 {
 public:
+    enum Action
+    {
+        DontAddEnterYet,
+        AddEnterNow
+    };
+    
     kpToolTextEnterCommand (const QString &name,
-        int row, int col,
+        int row, int col, Action action,
         kpMainWindow *mainWindow);
     virtual ~kpToolTextEnterCommand ();
 
     void addEnter ();
 
     virtual int size () const;
     
     virtual void execute ();
     virtual void unexecute ();
 
 protected:
     int m_row, m_col;
     int m_numEnters;
 };
 
 class kpToolTextBackspaceCommand : public kpNamedCommand
 {
 public:
+    enum Action
+    {
+        DontAddBackspaceYet,
+        AddBackspaceNow
+    };
+    
     kpToolTextBackspaceCommand (const QString &name,
-        int row, int col,
+        int row, int col, Action action,
         kpMainWindow *mainWindow);
     virtual ~kpToolTextBackspaceCommand ();
 
     void addBackspace ();
 
     virtual int size () const;
     
     virtual void execute ();
     virtual void unexecute ();
 
 protected:
     int m_row, m_col;
     int m_numBackspaces;
     QString m_deletedText;
 };
 
 class kpToolTextDeleteCommand : public kpNamedCommand
 {
 public:
+    enum Action
+    {
+        DontAddDeleteYet,
+        AddDeleteNow
+    };
+    
     kpToolTextDeleteCommand (const QString &name,
-        int row, int col,
+        int row, int col, Action action,
         kpMainWindow *mainWindow);
     virtual ~kpToolTextDeleteCommand ();
 
     void addDelete ();
 
     virtual int size () const;
     
     virtual void execute ();
     virtual void unexecute ();
 
 protected:
     int m_row, m_col;
     int m_numDeletes;
     QString m_deletedText;
 };
 
-#endif  // __kp_tool_text_h__
+#endif  // KP_TOOL_TEXT_H
 
