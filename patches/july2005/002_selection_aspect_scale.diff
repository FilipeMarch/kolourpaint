BEGIN
Hold shift when freehand scaling selection to Keep Aspect Ratio.
END

diff -ur -xMakefile.in -x'*~' -x'*.o' -x'*.moc' -x'*.lo' -x'*.la' -x.deps -x.libs -xconfig.log -xMakefile -xkolourpaintlicense.h -x kpmainwindow_view.cpp -xkolourpaintversion.h -x'.*.swp' -xk base/kolourpaint/tools/kptoolselection.cpp head/kolourpaint/tools/kptoolselection.cpp
--- base/kolourpaint/tools/kptoolselection.cpp	2005-02-02 22:16:50.000000000 +1100
+++ head/kolourpaint/tools/kptoolselection.cpp	2005-06-16 12:55:46.276420080 +1000
@@ -915,34 +915,72 @@
 
 
         kpSelection originalSelection = m_currentResizeScaleCommand->originalSelection ();
-        int newWidth = originalSelection.width ();
-        int newHeight = originalSelection.height ();
+        const int oldWidth = originalSelection.width ();
+        const int oldHeight = originalSelection.height ();
+
+        
+        // Determine new width.
+        
+        int userXSign = 0;
+        if (m_resizeScaleType & kpView::Left)
+            userXSign = -1;
+        else if (m_resizeScaleType & kpView::Right)
+            userXSign = +1;
+            
+        int newWidth = oldWidth + userXSign * (thisPoint.x () - m_startPoint.x ());
+        
+        newWidth = QMAX (originalSelection.minimumWidth (), newWidth);
+        
+        
+        // Determine new height.
+        
+        int userYSign = 0;
+        if (m_resizeScaleType & kpView::Top)
+            userYSign = -1;
+        else if (m_resizeScaleType & kpView::Bottom)
+            userYSign = +1;
+            
+        int newHeight = oldHeight + userYSign * (thisPoint.y () - m_startPoint.y ());
+        
+        newHeight = QMAX (originalSelection.minimumHeight (), newHeight);
+
+                
+        // Keep aspect ratio?
+        if (m_shiftPressed && !sel->isText ())
+        {
+            // Width changed more than height?  At equality, favour width.
+            // Fix width, change height.
+            if ((userXSign ? double (newWidth) / oldWidth : 0) >=
+                (userYSign ? double (newHeight) / oldHeight : 0))
+            {
+                newHeight = newWidth * oldHeight / oldWidth;
+                newHeight = QMAX (originalSelection.minimumHeight (),
+                                  newHeight);
+            }
+            // Height changed more than width?
+            // Fix height, change width.
+            else
+            {
+                newWidth = newHeight * oldWidth / oldHeight;
+                newWidth = QMAX (originalSelection.minimumWidth (), newWidth);
+            }
+        }
+            
+                              
+        // Adjust x/y to new width/height for left/top resizes.
+            
         int newX = originalSelection.x ();
         int newY = originalSelection.y ();
-
+                                                
         if (m_resizeScaleType & kpView::Left)
         {
-            newWidth = QMAX (originalSelection.minimumWidth (),
-                             newWidth - (thisPoint.x () - m_startPoint.x ()));
             newX -= (newWidth - originalSelection.width ());
         }
-        else if (m_resizeScaleType & kpView::Right)
-        {
-            newWidth = QMAX (originalSelection.minimumWidth (),
-                             newWidth + (thisPoint.x () - m_startPoint.x ()));
-        }
-
+        
         if (m_resizeScaleType & kpView::Top)
         {
-            newHeight = QMAX (originalSelection.minimumHeight (),
-                              newHeight - (thisPoint.y () - m_startPoint.y ()));
             newY -= (newHeight - originalSelection.height ());
         }
-        else if (m_resizeScaleType & kpView::Bottom)
-        {
-            newHeight = QMAX (originalSelection.minimumHeight (),
-                              newHeight + (thisPoint.y () - m_startPoint.y ()));
-        }
 
     #if DEBUG_KP_TOOL_SELECTION && 1
         kdDebug () << "\t\tnewX=" << newX
