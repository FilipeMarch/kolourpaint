* Refactors kpTool keyboard handling.
* Makes spraycan continuous and derive from kpToolFlowBase.

diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/TODO head/kolourpaint/TODO
--- base/kolourpaint/TODO	2005-02-22 19:59:59.000000000 +1100
+++ head/kolourpaint/TODO	2005-06-28 18:19:46.000000000 +1000
@@ -9,6 +9,16 @@ Look in BUGS, patches/, grep sources for
 here:
 
 
+rename pics/custom and pics/ to correct
+move tools/kptool.cpp ../
+rename airspray
+
+rename kolourpaint-1.4pre/kolourpaint to kolourpaint-1.4pre/src (there was
+a reason why this wasn't done but I forgot - document this time)
+
+unix2dos text files in all non-KDE releases to not give bad notepad impression
+
+
 KolourPaint 1.4
 ~~~~~~~~~~~~~~~
 
@@ -59,6 +69,11 @@ With flow tools (pen, brush, spraycan), 
 CTRL forces vertical - so those of us without perfectly steady hands
 can still draw straight without continually hitting the Undo button :)
 
+spraycan should be continuous - merge with kpToolBrush base?
+* [cleanup] remove all instances of kpTool*::setMode() - use proper class hierarchy
+
+Bug: Enter with mouse move on brush splits into several draw ops
+
 
 checkerboard static in thumbnail but moves with doc in mainview - make it
 static in all places so that it's clear it's not part of the doc
@@ -131,8 +146,6 @@ text box create != cmd
 
 text toolbar permanently floats to stop view from bobbing up/down
 
-CTRL+Backspace deletes word
-
 
 Rethink kpView/kpViewManager design because of:
 - performance
@@ -242,9 +255,6 @@ scaling image with sel (no pixmap), and 
 (this is a rather difficult problem to fix since sel has already been used
  for Image/Scale so would be inapproriate to replace it in cmd history)
 
-spraycan should be continuous - merge with kpToolBrush base?
-* [cleanup] remove all instances of kpTool*::setMode() - use proper class hierarchy
-
 tool to select rectangular area to zoom into
 
 Emmeran Seehuber:
@@ -527,7 +537,6 @@ Update: qt-copy/patches/0005-qpixmap_mit
 
 Bela-Andreas Bargel:
 - extra toolbar with slideshow and other image viewing options
-- "CTRL-mousewheel" to zoom in/out of the window
 
 Christoph Eckert:
 - Icons could be rearranged; drawing and editing tools should
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolairspray.cpp head/kolourpaint/tools/kptoolairspray.cpp
--- base/kolourpaint/tools/kptoolairspray.cpp	2005-02-02 22:11:27.000000000 +1100
+++ head/kolourpaint/tools/kptoolairspray.cpp	2006-07-07 22:32:17.000000000 +1000
@@ -26,9 +26,10 @@
 */
 
 
-#define DEBUG_KP_TOOL_SPRAYCAN 0
+#define DEBUG_KP_TOOL_SPRAYCAN 1
 
-#include <stdlib.h>
+
+#include <cstdlib>
 
 #include <qbitmap.h>
 #include <qpainter.h>
@@ -48,53 +49,47 @@
 #include <kpmainwindow.h>
 #include <kppixmapfx.h>
 #include <kptoolairspray.h>
+#include <kptoolflowcommand.h>
 #include <kptooltoolbar.h>
 #include <kptoolwidgetspraycansize.h>
 #include <kpview.h>
 #include <kpviewmanager.h>
 
 
-/*
- * kpToolAirSpray
- */
-
 kpToolAirSpray::kpToolAirSpray (kpMainWindow *mainWindow)
-    : kpTool (i18n ("Spraycan"), i18n ("Sprays graffiti"),
+    : kpToolFlowBase (i18n ("Spraycan"), i18n ("Sprays graffiti"),
               Qt::Key_Y,
-              mainWindow, "tool_spraycan"),
-      m_currentCommand (0)
+        mainWindow, "tool_spraycan")
 {
     m_timer = new QTimer (this);
-    connect (m_timer, SIGNAL (timeout ()), this, SLOT (actuallyDraw ()));
+    connect (m_timer, SIGNAL (timeout ()),
+        this, SLOT (timeoutDraw ()));
 }
 
 kpToolAirSpray::~kpToolAirSpray ()
 {
-    delete m_currentCommand;
 }
 
 
-// private
+// protected virtual [base kpToolFlowBase]
 QString kpToolAirSpray::haventBegunDrawUserMessage () const
 {
     return i18n ("Click or drag to spray graffiti.");
 }
 
-// public virtual
+
+// public virtual [base kpToolFlowBase]
 void kpToolAirSpray::begin ()
 {
-    kpToolToolBar *tb = toolToolBar ();
-
     m_toolWidgetSpraycanSize = 0;
-    m_size = 10;
 
+    kpToolToolBar *tb = toolToolBar ();
     if (tb)
     {
         m_toolWidgetSpraycanSize = tb->toolWidgetSpraycanSize ();
 
         if (m_toolWidgetSpraycanSize)
         {
-            m_size = m_toolWidgetSpraycanSize->spraycanSize ();
             connect (m_toolWidgetSpraycanSize, SIGNAL (spraycanSizeChanged (int)),
                      this, SLOT (slotSpraycanSizeChanged (int)));
 
@@ -102,275 +97,252 @@ void kpToolAirSpray::begin ()
         }
     }
 
-    setUserMessage (haventBegunDrawUserMessage ());
+    kpToolFlowBase::begin ();
 }
 
-// public virtual
+// public virtual [base kpToolFlowBase]
 void kpToolAirSpray::end ()
 {
+    kpToolFlowBase::end ();
+    
     if (m_toolWidgetSpraycanSize)
     {
         disconnect (m_toolWidgetSpraycanSize, SIGNAL (spraycanSizeChanged (int)),
                     this, SLOT (slotSpraycanSizeChanged (int)));
         m_toolWidgetSpraycanSize = 0;
     }
-
-    setUserMessage (haventBegunDrawUserMessage ());
-}
-
-// private slot
-void kpToolAirSpray::slotSpraycanSizeChanged (int size)
-{
-    m_size = size;
-}
-
-
-void kpToolAirSpray::beginDraw ()
-{
-    m_currentCommand = new kpToolAirSprayCommand (
-        color (m_mouseButton),
-        m_size,
-        mainWindow ());
-
-    // without delay
-    actuallyDraw ();
-
-    // use a timer instead of reimplementing draw() (we don't draw all the time)
-    m_timer->start (25);
-
-    setUserMessage (cancelUserMessage ());
-}
-
-void kpToolAirSpray::draw (const QPoint &thisPoint, const QPoint &, const QRect &)
-{
-    // if the user is moving the spray, make the spray line continuous
-    if (thisPoint != m_lastPoint)
-    {
-        // without delay
-        actuallyDraw ();
     }
 
-    setUserShapePoints (thisPoint);
-}
 
-void kpToolAirSpray::actuallyDraw ()
+// protected
+void kpToolAirSpray::paintersSprayOneDocPoint (QPainter *painter,
+    QPainter *maskPainter,
+    const QRect &docRect,
+    const QPoint &docPoint)
 {
     QPointArray pArray (10);
-    int numPoints = 0;
-
-    QPoint p = m_currentPoint;
+    int numPointsCreated = 0;
 
 #if DEBUG_KP_TOOL_SPRAYCAN
-    kdDebug () << "kpToolAirSpray::actuallyDraw() currentPoint=" << p
-               << " size=" << m_size
+    kdDebug () << "\t\tkpToolAirSpray::paintersSprayOneDocPoint(docRect=" << docRect
+               << ",docPoint=" << docPoint
+               << ") spraycanSize=" << spraycanSize ()
                << endl;
 #endif
 
-    int radius = m_size / 2;
+    const int radius = spraycanSize () / 2;
 
     for (int i = 0; i < 10; i++)
     {
         int dx, dy;
 
-        dx = (rand () % m_size) - radius;
-        dy = (rand () % m_size) - radius;
+        dx = (rand () % spraycanSize ()) - radius;
+        dy = (rand () % spraycanSize ()) - radius;
 
         // make it look circular
         // OPT: can be done better
         if (dx * dx + dy * dy <= radius * radius)
-            pArray [numPoints++] = QPoint (p.x () + dx, p.y () + dy);
-    }
-
-    pArray.resize (numPoints);
-
-    if (numPoints > 0)
-    {
-        // leave the command to draw
-        m_currentCommand->addPoints (pArray);
-    }
+            pArray [numPointsCreated++] = QPoint (docPoint.x () + dx, docPoint.y () + dy);
 }
 
-// virtual
-void kpToolAirSpray::cancelShape ()
-{
-#if 0
-    endDraw (QPoint (), QRect ());
-    mainWindow ()->commandHistory ()->undo ();
-#else
-    m_timer->stop ();
-
-    m_currentCommand->finalize ();
-    m_currentCommand->cancel ();
+    pArray.resize (numPointsCreated);
 
-    delete m_currentCommand;
-    m_currentCommand = 0;
+#if DEBUG_KP_TOOL_SPRAYCAN && 0
+    kdDebug () << "\t\t\tnumPointsCreated=" << numPointsCreated << endl;
 #endif
 
-    setUserMessage (i18n ("Let go of all the mouse buttons."));
-}
 
-void kpToolAirSpray::releasedAllButtons ()
-{
-    setUserMessage (haventBegunDrawUserMessage ());
-}
+    if (numPointsCreated == 0)
+        return;
 
-// virtual
-void kpToolAirSpray::endDraw (const QPoint &, const QRect &)
+    
+    for (int i = 0; i < numPointsCreated; i++)
 {
-    m_timer->stop ();
+    #if DEBUG_KP_TOOL_SPRAYCAN && 0
+        kdDebug () << "\t\t\t\t" << i << ": " << pArray [i] << endl;
+    #endif
 
-    m_currentCommand->finalize ();
-    mainWindow ()->commandHistory ()->addCommand (m_currentCommand, false /* don't exec */);
+        QPoint pt (pArray [i].x () - docRect.x (),
+                   pArray [i].y () - docRect.y ());
 
-    // don't delete - it's up to the commandHistory
-    m_currentCommand = 0;
+        if (painter->isActive ())
+            painter->drawPoint (pt);
 
-    setUserMessage (haventBegunDrawUserMessage ());
+        if (maskPainter->isActive ())
+            maskPainter->drawPoint (pt);
+    }
 }
 
+// protected
+void kpToolAirSpray::pixmapSprayManyDocPoints (QPixmap *pixmap,
+    const QRect &docRect,
+    const QValueVector <QPoint> &docPoints)
+{
+#if DEBUG_KP_TOOL_SPRAYCAN
+    kdDebug () << "\tkpToolAirSpray::pixmapSprayManyDocPoints(docRect="
+               << docRect << ")"
+               << endl;
+#endif
 
-/*
- * kpToolAirSprayCommand
- */
+    QBitmap maskBitmap;
+    QPainter painter, maskPainter;
 
-kpToolAirSprayCommand::kpToolAirSprayCommand (const kpColor &color, int size,
-                                              kpMainWindow *mainWindow)
-    : kpCommand (mainWindow),
-      m_color (color),
-      m_size (size),
-      m_newPixmapPtr (0)
+    drawLineSetupPainterMask (pixmap,
+        &maskBitmap,
+        &painter, &maskPainter);
+        
+    for (QValueVector <QPoint>::const_iterator pit = docPoints.begin ();
+         pit != docPoints.end ();
+         pit++)
 {
-    m_oldPixmap = *document ()->pixmap ();
+        paintersSprayOneDocPoint (&painter, &maskPainter,
+            docRect, *pit);
 }
 
-kpToolAirSprayCommand::~kpToolAirSprayCommand ()
-{
-    delete m_newPixmapPtr;
+    drawLineTearDownPainterMask (pixmap,
+        &maskBitmap,
+        &painter, &maskPainter);
 }
 
 
-// public virtual [base kpCommand]
-QString kpToolAirSprayCommand::name () const
+// public virtual [base kpToolFlowBase]
+void kpToolAirSpray::beginDraw ()
 {
-    return i18n ("Spraycan");
-}
+#if DEBUG_KP_TOOL_SPRAYCAN
+    kdDebug () << "kpToolAirSpray::beginDraw()" << endl;
+#endif
 
+    kpToolFlowBase::beginDraw ();
 
-// public virtual [base kpCommand]
-int kpToolAirSprayCommand::size () const
-{
-    return kpPixmapFX::pixmapSize (m_newPixmapPtr) +
-           kpPixmapFX::pixmapSize (m_oldPixmap);
+    // use a timer instead of reimplementing draw() (we don't draw all the time)
+    m_timer->start (25);    
 }
 
 
-// Redo:
-//
-// must not call before unexecute() as m_newPixmapPtr is null
-// (one reason why we told addCommand() not to execute,
-//  the other being that the dots have already been draw onto the doc)
-void kpToolAirSprayCommand::execute ()
-{
-    if (m_newPixmapPtr)
+// public virtual [base kpToolFlowBase]
+QRect kpToolAirSpray::drawPoint (const QPoint &point)
     {
-        document ()->setPixmapAt (*m_newPixmapPtr, m_boundingRect.topLeft ());
-
-        // (will be regenerated in unexecute() if required)
-        delete m_newPixmapPtr;
-        m_newPixmapPtr = 0;
-    }
-    else
-        kdError () << "kpToolAirSprayCommand::execute() has null m_newPixmapPtr" << endl;
-}
+#if DEBUG_KP_TOOL_SPRAYCAN
+    kdDebug () << "kpToolAirSpray::drawPoint" << point
+               << " lastPoint=" << m_lastPoint
+               << endl;
+#endif
 
-// Undo:
-void kpToolAirSprayCommand::unexecute ()
-{
-    if (!m_newPixmapPtr)
+    // if this is the first in the flow or if the user is moving the spray, make the spray line continuous
+    if (point != m_lastPoint)
     {
-        // the ultimate in laziness - figure out Redo info only if we Undo
-        m_newPixmapPtr = new QPixmap (m_boundingRect.width (), m_boundingRect.height ());
-        *m_newPixmapPtr = document ()->getPixmapAt (m_boundingRect);
+        // without delay
+        return drawLine (point, point);
     }
-    else
-        kdError () << "kpToolAirSprayCommand::unexecute() has non-null newPixmapPtr" << endl;
 
-    document ()->setPixmapAt (m_oldPixmap, m_boundingRect.topLeft ());
+    return QRect ();
 }
 
-
-// public
-void kpToolAirSprayCommand::addPoints (const QPointArray &points)
+// public virtual [base kpToolFlowBase]
+QRect kpToolAirSpray::drawLine (const QPoint &thisPoint, const QPoint &lastPoint)
 {
-    QRect docRect = points.boundingRect ();
-
 #if DEBUG_KP_TOOL_SPRAYCAN
-    kdDebug () << "kpToolAirSprayCommand::addPoints() docRect=" << docRect
-               << " numPoints=" << points.count () << endl;
-    for (int i = 0; i < (int) points.count (); i++)
-        kdDebug () << "\t" << i << ": " << points [i] << endl;
+    kdDebug () << "kpToolAirSpray::drawLine(thisPoint=" << thisPoint
+               << ",lastPoint=" << lastPoint
+               << ")" << endl;
 #endif
 
+    QRect docRect = QRect (thisPoint, lastPoint).normalize ();
+    docRect = neededRect (docRect, spraycanSize ());
     QPixmap pixmap = document ()->getPixmapAt (docRect);
-    QBitmap mask;
 
-    QPainter painter, maskPainter;
 
-    if (m_color.isOpaque ())
-    {
-        painter.begin (&pixmap);
-        painter.setPen (m_color.toQColor ());
-    }
+    QValueVector <QPoint> docPoints = interpolatePoints (thisPoint, lastPoint,
+        .1/*less dense: select 10% of adjacent pixels - not all*/);
 
-    if (pixmap.mask () || m_color.isTransparent ())
-    {
-        mask = kpPixmapFX::getNonNullMask (pixmap);
-        maskPainter.begin (&mask);
-        maskPainter.setPen (m_color.maskColor ());
-    }
+    // By chance no points to draw?
+    if (docPoints.empty ())
+        return QRect ();
 
-    for (int i = 0; i < (int) points.count (); i++)
+        
+    // Drawing a line (not just a point) starting at lastPoint?
+    if (thisPoint != lastPoint &&
+        docPoints [0] == lastPoint)
     {
-        QPoint pt (points [i].x () - docRect.x (),
-                   points [i].y () - docRect.y ());
+    #if DEBUG_KP_TOOL_SPRAYCAN
+        kdDebug () << "\tis a line starting at lastPoint - erasing="
+                   << docPoints [0] << endl;
+    #endif
 
-        if (painter.isActive ())
-            painter.drawPoint (pt);
+        // We're not expecting a duplicate 2nd interpolation point.
+        Q_ASSERT (docPoints [1] != lastPoint);
 
-        if (maskPainter.isActive ())
-            maskPainter.drawPoint (pt);
+        // lastPoint was drawn previously so don't draw over it again or
+        // it will (theoretically) be denser than expected.
+        //
+        // Unlike other tools such as the Brush, drawing over the same
+        // point does result in a different appearance.
+        //
+        // Having said this, the user probably won't notice either way
+        // since spraying on nearby document interpolation points will
+        // spray around this document point anyway (due to the
+        // spraycanSize() radius).
+        docPoints.erase (docPoints.begin ());
     }
 
-    if (maskPainter.isActive ())
-        maskPainter.end ();
 
-    if (painter.isActive ())
-        painter.end ();
+    pixmapSprayManyDocPoints (&pixmap, docRect, docPoints);
 
-    if (!mask.isNull ())
-        pixmap.setMask (mask);
 
     viewManager ()->setFastUpdates ();
     document ()->setPixmapAt (pixmap, docRect.topLeft ());
     viewManager ()->restoreFastUpdates ();
 
-    m_boundingRect = m_boundingRect.unite (docRect);
+    return docRect;
 }
 
-void kpToolAirSprayCommand::finalize ()
+void kpToolAirSpray::timeoutDraw ()
 {
-    // store only needed part of doc pixmap
-    m_oldPixmap = kpTool::neededPixmap (m_oldPixmap, m_boundingRect);
+#if DEBUG_KP_TOOL_SPRAYCAN
+    kdDebug () << "kpToolAirSpray::timeoutDraw()" << endl;
+#endif
+
+    m_currentCommand->updateBoundingRect (
+        drawLine (m_currentPoint, m_currentPoint));
 }
 
-void kpToolAirSprayCommand::cancel ()
+    
+// public virtual [base kpToolFlowBase]
+void kpToolAirSpray::cancelShape ()
 {
-    if (m_boundingRect.isValid ())
+#if DEBUG_KP_TOOL_SPRAYCAN
+    kdDebug () << "kpToolAirSpray::cancelShape()" << endl;
+#endif
+
+    m_timer->stop ();
+    kpToolFlowBase::cancelShape ();
+}
+
+// public virtual [base kpToolFlowBase]
+void kpToolAirSpray::endDraw (const QPoint &thisPoint,
+    const QRect &normalizedRect)
     {
-        viewManager ()->setFastUpdates ();
-        document ()->setPixmapAt (m_oldPixmap, m_boundingRect.topLeft ());
-        viewManager ()->restoreFastUpdates ();
+#if DEBUG_KP_TOOL_SPRAYCAN
+    kdDebug () << "kpToolAirSpray::endDraw(thisPoint=" << thisPoint
+               << ")" << endl;
+#endif
+
+    m_timer->stop ();
+    kpToolFlowBase::endDraw (thisPoint, normalizedRect);
+}
+
+
+// protected
+int kpToolAirSpray::spraycanSize () const
+{
+    return m_toolWidgetSpraycanSize->spraycanSize ();
     }
+
+// protected slot
+void kpToolAirSpray::slotSpraycanSizeChanged (int size)
+{
+    (void) size;
 }
 
+
 #include <kptoolairspray.moc>
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolairspray.h head/kolourpaint/tools/kptoolairspray.h
--- base/kolourpaint/tools/kptoolairspray.h	2005-02-02 22:11:27.000000000 +1100
+++ head/kolourpaint/tools/kptoolairspray.h	2005-06-23 22:38:16.000000000 +1000
@@ -29,9 +29,9 @@
 #ifndef __kptoolairspray_h__
 #define __kptoolairspray_h__
 
-#include <kpcommandhistory.h>
-#include <kpcolor.h>
-#include <kptool.h>
+
+#include <kptoolflowbase.h>
+
 
 class QPixmap;
 class QPoint;
@@ -40,71 +40,61 @@ class QString;
 class QTimer;
 
 class kpMainWindow;
-class kpToolAirSprayCommand;
+class kpToolFlowCommand;
 class kpToolWidgetSpraycanSize;
 class kpViewManager;
 
-class kpToolAirSpray : public kpTool
+
+class kpToolAirSpray : public kpToolFlowBase
 {
 Q_OBJECT
 
 public:
-    kpToolAirSpray (kpMainWindow *);
+    kpToolAirSpray (kpMainWindow *mainWindow);
     virtual ~kpToolAirSpray ();
 
-private:
-    QString haventBegunDrawUserMessage () const;
+    
+protected:
+    virtual QString haventBegunDrawUserMessage () const;
+
 
 public:
     virtual void begin ();
     virtual void end ();
 
-private slots:
-    void slotSpraycanSizeChanged (int size);
+    
+protected:
+    void paintersSprayOneDocPoint (QPainter *painter,
+        QPainter *maskPainter,
+        const QRect &docRect,
+        const QPoint &docPoint);
+    void pixmapSprayManyDocPoints (QPixmap *pixmap,
+        const QRect &docRect,
+        const QValueVector <QPoint> &docPoints);
+
     
 public:
     virtual void beginDraw ();
-    virtual void draw (const QPoint &thisPoint, const QPoint &, const QRect &);
+    virtual QRect drawPoint (const QPoint &point);    
+    virtual QRect drawLine (const QPoint &thisPoint, const QPoint &lastPoint);
     virtual void cancelShape ();
-    virtual void releasedAllButtons ();
-    virtual void endDraw (const QPoint &, const QRect &);
+    virtual void endDraw (const QPoint &thisPoint,
+        const QRect &normalizedRect);
 
 public slots:
-    void actuallyDraw ();
-
-private:
-    kpToolWidgetSpraycanSize *m_toolWidgetSpraycanSize;
-    kpToolAirSprayCommand *m_currentCommand;
-    QTimer *m_timer;
-    int m_size;
-};
-
-class kpToolAirSprayCommand : public kpCommand
-{
-public:
-    kpToolAirSprayCommand (const kpColor &color, int size,
-                           kpMainWindow *mainWindow);
-    virtual ~kpToolAirSprayCommand ();
-
-    virtual QString name () const;
+    void timeoutDraw ();
 
-    virtual int size () const;
     
-    virtual void execute ();
-    virtual void unexecute ();
+protected:
+    int spraycanSize () const;
+protected slots:
+    void slotSpraycanSizeChanged (int size);
 
-    // interface for KToolAirSpray
-    void addPoints (const QPointArray &points);
-    void finalize ();
-    void cancel ();
 
-private:
-    kpColor m_color;
-    int m_size;
-
-    QPixmap *m_newPixmapPtr;
-    QPixmap m_oldPixmap;
-    QRect m_boundingRect;
+protected:
+    QTimer *m_timer;
+    kpToolWidgetSpraycanSize *m_toolWidgetSpraycanSize;
 };
 
+
 #endif  // __kptoolairspray_h__
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolcolorwasher.cpp head/kolourpaint/tools/kptoolcolorwasher.cpp
--- base/kolourpaint/tools/kptoolcolorwasher.cpp	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolcolorwasher.cpp	2005-06-23 22:48:18.000000000 +1000
@@ -235,7 +235,7 @@ bool kpToolColorWasher::drawShouldProcee
 }
 
 
-void kpToolColorWasher::drawPoint (const QPoint &)
+QRect kpToolColorWasher::drawPoint (const QPoint &)
 {            
 #if DEBUG_KP_TOOL_COLOR_WASHER
     kdDebug () << "Washing pixmap (immediate)" << endl;
@@ -293,20 +293,13 @@ void kpToolColorWasher::drawPoint (const
     #if DEBUG_KP_TOOL_COLOR_WASHER
         kdDebug () << "\tset doc: " << timer.restart () << "ms" << endl;
     #endif
-        m_currentCommand->updateBoundingRect (hotRect ());
-    #if DEBUG_KP_TOOL_COLOR_WASHER
-        kdDebug () << "\tupdate boundingRect: " << timer.restart () << "ms" << endl;
-        kdDebug () << "\tdone" << endl;
-    #endif
+        return hotRect ();
     }
 
-#if DEBUG_KP_TOOL_COLOR_WASHER && 1
-    kdDebug () << endl;
-#endif
+    return QRect ();
 }
 
-bool kpToolColorWasher::drawLine (QPixmap *pixmap, const QRect &docRect,
-    const QPoint &thisPoint, const QPoint &lastPoint)
+QRect kpToolColorWasher::drawLine (const QPoint &thisPoint, const QPoint &lastPoint)
 {
 #if DEBUG_KP_TOOL_COLOR_WASHER
     kdDebug () << "Washing pixmap (w=" << rect.width ()
@@ -315,10 +308,17 @@ bool kpToolColorWasher::drawLine (QPixma
     int convAndWashTime;
 #endif
 
+        
+    QRect docRect = QRect (thisPoint, lastPoint).normalize ();
+    docRect = neededRect (docRect, m_brushPixmap [m_mouseButton].width ());
+    QPixmap pixmap = document ()->getPixmapAt (docRect);
+        
+
+
     QBitmap maskBitmap;    
     QPainter painter, maskPainter;
 
-    drawLineSetupPainterMask (pixmap,
+    drawLineSetupPainterMask (&pixmap,
         &maskBitmap,
         &painter, &maskPainter);
 
@@ -327,7 +327,7 @@ bool kpToolColorWasher::drawLine (QPixma
 #if DEBUG_KP_TOOL_COLOR_WASHER
     timer.start ();
 #endif
-    image = kpPixmapFX::convertToImage (*pixmap);
+    image = kpPixmapFX::convertToImage (pixmap);
 #if DEBUG_KP_TOOL_COLOR_WASHER
     convAndWashTime = timer.restart ();
     kdDebug () << "\tconvert to image: " << convAndWashTime << " ms" << endl;
@@ -337,17 +337,14 @@ bool kpToolColorWasher::drawLine (QPixma
 
     kpColor colorToReplace = color (1 - m_mouseButton);
 
-    QValueVector <QPoint> points = interpolatePoints (docRect,
-        thisPoint, lastPoint);
+    QValueVector <QPoint> points = interpolatePoints (thisPoint, lastPoint);
     for (QValueVector <QPoint>::const_iterator pit = points.begin ();
             pit != points.end ();
             pit++)
     {
-        const int XXX = (*pit).x (), YYY = (*pit).y ();
-        
         if (wash (&painter, &maskPainter, image,
                     colorToReplace,
-                    docRect, XXX + docRect.left (), YYY + docRect.top ()))
+                    docRect, (*pit).x (), (*pit).y ()))
         {
             didSomething = true;
         }
@@ -355,12 +352,13 @@ bool kpToolColorWasher::drawLine (QPixma
 
 
     
-    drawLineTearDownPainterMask (pixmap,
+    drawLineTearDownPainterMask (&pixmap,
         &maskBitmap,
         &painter, &maskPainter,
         didSomething);
 
 
+        
 #if DEBUG_KP_TOOL_COLOR_WASHER
     int ms = timer.restart ();
     kdDebug () << "\ttried to wash: " << ms << "ms"
@@ -370,7 +368,13 @@ bool kpToolColorWasher::drawLine (QPixma
     convAndWashTime += ms;
 #endif
 
-    return didSomething;
+    if (didSomething)
+    {
+        document ()->setPixmapAt (pixmap, docRect.topLeft ());
+        return docRect;
+    }
+    
+    return QRect ();
 }
 
 #include <kptoolcolorwasher.moc>
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolcolorwasher.h head/kolourpaint/tools/kptoolcolorwasher.h
--- base/kolourpaint/tools/kptoolcolorwasher.h	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolcolorwasher.h	2005-06-23 21:41:47.000000000 +1000
@@ -69,11 +69,8 @@ protected:
     
 
 
-    virtual void drawPoint (const QPoint &point);
-    virtual bool drawLine (QPixmap *pixmap,
-        const QRect &docRect,
-        const QPoint &thisPoint, const QPoint &lastPoint);
-
+    virtual QRect drawPoint (const QPoint &point);
+    virtual QRect drawLine (const QPoint &thisPoint, const QPoint &lastPoint);
 
 };
 
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptool.cpp head/kolourpaint/tools/kptool.cpp
--- base/kolourpaint/tools/kptool.cpp	2005-06-14 13:55:47.000000000 +1000
+++ head/kolourpaint/tools/kptool.cpp	2006-07-05 23:24:36.000000000 +1000
@@ -924,7 +924,7 @@ kpCommandHistory *kpTool::commandHistory
 
 void kpTool::mousePressEvent (QMouseEvent *e)
 {
-#if DEBUG_KP_TOOL && 1
+#if DEBUG_KP_TOOL && 1 || 1
     kdDebug () << "kpTool::mousePressEvent pos=" << e->pos ()
                << " btnStateBefore=" << (int) e->state ()
                << " btnStateAfter=" << (int) e->stateAfter ()
@@ -1029,8 +1029,9 @@ void kpTool::mousePressEvent (QMouseEven
 
 void kpTool::mouseMoveEvent (QMouseEvent *e)
 {
-#if DEBUG_KP_TOOL && 0
+#if DEBUG_KP_TOOL && 0 || 1
     kdDebug () << "kpTool::mouseMoveEvent pos=" << e->pos ()
+               << " btnState=" << (int) e->state ()
                << " btnStateAfter=" << (int) e->stateAfter () << endl;
     kpView *v0 = viewUnderCursor (),
            *v1 = viewManager ()->viewUnderCursor (true/*use Qt*/),
@@ -1059,7 +1060,7 @@ void kpTool::mouseMoveEvent (QMouseEvent
         m_currentPoint = view->transformViewToDoc (e->pos ());
         m_currentViewPoint = e->pos ();
 
-    #if DEBUG_KP_TOOL && 0
+    #if DEBUG_KP_TOOL && 0 || 1
         kdDebug () << "\tDraw!" << endl;
     #endif
 
@@ -1105,11 +1106,12 @@ void kpTool::mouseMoveEvent (QMouseEvent
 
 void kpTool::mouseReleaseEvent (QMouseEvent *e)
 {
-#if DEBUG_KP_TOOL && 1
+#if DEBUG_KP_TOOL && 1 || 1
     kdDebug () << "kpTool::mouseReleaseEvent pos=" << e->pos ()
                << " btnStateBefore=" << (int) e->state ()
                << " btnStateAfter=" << (int) e->stateAfter ()
-               << " button=" << (int) e->button () << endl;
+               << " button=" << (int) e->button ()
+               << " beganDraw=" << m_beganDraw << endl;
 #endif
 
     if (m_beganDraw)  // didn't cancelShape()
@@ -1176,24 +1178,17 @@ void kpTool::wheelEvent (QWheelEvent *e)
 }
 
 
-void kpTool::keyPressEvent (QKeyEvent *e)
+void kpTool::seeIfAndHandleModifierKey (QKeyEvent *e)
 {
-#if DEBUG_KP_TOOL && 0
-    kdDebug () << "kpTool::keyPressEvent()" << endl;
-#endif
-
-    int dx = 0, dy = 0;
-
-    e->ignore ();
-
     switch (e->key ())
     {
     case 0:
     case Qt::Key_unknown:
     #if DEBUG_KP_TOOL && 0
-        kdDebug () << "kpTool::keyPressEvent() picked up unknown key!" << endl;
+        kdDebug () << "kpTool.cpp:seeIfAndHandleModifierKey() picked up unknown key!" << endl;
     #endif
         // --- fall thru and update all modifiers ---
+        
     case Qt::Key_Alt:
     case Qt::Key_Shift:
     case Qt::Key_Control:
@@ -1201,49 +1196,51 @@ void kpTool::keyPressEvent (QKeyEvent *e
 
         e->accept ();
         break;
+    }
+}
 
-    case Qt::Key_Delete:
-        m_mainWindow->slotDelete ();
-        break;
 
-    /*
-     * QCursor::setPos conveniently causes mouseMoveEvents :)
-     */
-
-    case Qt::Key_Home:     dx = -1, dy = -1;    break;
-    case Qt::Key_Up:                dy = -1;    break;
-    case Qt::Key_PageUp:   dx = +1, dy = -1;    break;
+// Returns in <dx> and <dy> the direction the arrow key "e->key()" is
+// pointing in or (0,0) if it's not a recognised arrow key.
+void kpTool::arrowKeyPressDirection (const QKeyEvent *e, int *dx, int *dy)
+{
+    int dxLocal = 0, dyLocal = 0;
 
-    case Qt::Key_Left:     dx = -1;             break;
-    case Qt::Key_Right:    dx = +1;             break;
+    switch (e->key ())
+    {
+    case Qt::Key_Home:     dxLocal = -1, dyLocal = -1;    break;
+    case Qt::Key_Up:                     dyLocal = -1;    break;
+    case Qt::Key_PageUp:   dxLocal = +1, dyLocal = -1;    break;
 
-    case Qt::Key_End:      dx = -1, dy = +1;    break;
-    case Qt::Key_Down:              dy = +1;    break;
-    case Qt::Key_PageDown: dx = +1, dy = +1;    break;
+    case Qt::Key_Left:     dxLocal = -1;                  break;
+    case Qt::Key_Right:    dxLocal = +1;                  break;
 
-    case Qt::Key_Enter:
-    case Qt::Key_Insert:
-    {
-        kpView *view = viewUnderCursor (); // TODO: wrong for dragging lines outside of view (for e.g.)
-    // TODO: what's the 5 key called?
-        if (view)
-        {
-            // TODO: what about the modifiers
-            QMouseEvent me (QEvent::MouseButtonPress,
-                            view->mapFromGlobal (QCursor::pos ()),
-                            Qt::LeftButton,
-                            0);
-            mousePressEvent (&me);
-            e->accept ();
+    case Qt::Key_End:      dxLocal = -1, dyLocal = +1;    break;
+    case Qt::Key_Down:                   dyLocal = +1;    break;
+    case Qt::Key_PageDown: dxLocal = +1, dyLocal = +1;    break;
         }
 
-        break;
-    }}
+    if (dx)
+        *dx = dxLocal;
+    if (dy)
+        *dy = dyLocal;
+}
 
-    kpView *view = viewUnderCursor ();
-    if (view && (dx || dy))
+void kpTool::seeIfAndHandleArrowKeyPress (QKeyEvent *e)
     {
-        QPoint oldPoint = view->mapFromGlobal (QCursor::pos ());
+    int dx, dy;
+    
+    arrowKeyPressDirection (e, &dx, &dy);
+    if (dx == 0 && dy == 0)
+        return;    
+
+                
+    kpView * const view = viewUnderCursor ();
+    if (!view)
+        return;
+
+                
+    const QPoint oldPoint = view->mapFromGlobal (QCursor::pos ());
     #if DEBUG_KP_TOOL && 0
         kdDebug () << "\toldPoint=" << oldPoint
                    << " dx=" << dx << " dy=" << dy << endl;
@@ -1261,6 +1258,8 @@ void kpTool::keyPressEvent (QKeyEvent *e
         kdDebug () << "\tnewPoint=" << QPoint (newViewX, newViewY) << endl;
     #endif
 
+    // Make sure we really moved at least one doc point (needed due to
+    // rounding error).
         if (view->transformViewToDoc (QPoint (newViewX, newViewY)) ==
             view->transformViewToDoc (oldPoint))
         {
@@ -1274,39 +1273,112 @@ void kpTool::keyPressEvent (QKeyEvent *e
 
 
         // TODO: visible width/height (e.g. with scrollbars)
-        int x = QMIN (QMAX (newViewX, 0), view->width () - 1);
-        int y = QMIN (QMAX (newViewY, 0), view->height () - 1);
+    const int x = QMIN (QMAX (newViewX, 0), view->width () - 1);
+    const int y = QMIN (QMAX (newViewY, 0), view->height () - 1);
+
 
+    // QCursor::setPos conveniently causes mouseMoveEvents
         QCursor::setPos (view->mapToGlobal (QPoint (x, y)));
         e->accept ();
     }
+
+
+bool kpTool::isDrawKey (int key)
+{
+    return (key == Qt::Key_Enter ||
+            key == Qt::Key_Return ||
+            key == Qt::Key_Insert ||
+            key == Qt::Key_Clear ||
+            key == Qt::Key_L);
 }
 
-void kpTool::keyReleaseEvent (QKeyEvent *e)
+void kpTool::seeIfAndHandleBeginDrawKeyPress (QKeyEvent *e)
 {
-#if DEBUG_KP_TOOL && 0
-    kdDebug () << "kpTool::keyReleaseEvent() e->key=" << e->key () << endl;
-#endif
+    if (e->isAutoRepeat ())
+        return;
 
-    e->ignore ();
+    if (!isDrawKey (e->key ()))
+        return;
 
-    switch (e->key ())
+    
+    // TODO: wrong for dragging lines outside of view (for e.g.)
+    kpView * const view = viewUnderCursor ();
+    if (!view)
+        return;
+        
+        
+    // TODO: what about the modifiers?
+    QMouseEvent me (QEvent::MouseButtonPress,
+                    view->mapFromGlobal (QCursor::pos ()),
+                    Qt::LeftButton,
+                    0);
+    mousePressEvent (&me);
+    e->accept ();
+}
+
+void kpTool::seeIfAndHandleEndDrawKeyPress (QKeyEvent *e)
     {
-    case 0:
-    case Qt::Key_unknown:
-    #if DEBUG_KP_TOOL
-        kdDebug () << "kpTool::keyReleaseEvent() picked up unknown key!" << endl;
+#if DEBUG_KP_TOOL && 0 || 1
+    kdDebug () << "kpTool::setIfAndHandleEndDrawKeyPress() key=" << e->key ()
+               << " isAutoRepeat=" << e->isAutoRepeat ()
+               << " isDrawKey=" << isDrawKey (e->key ())
+               << " view=" << viewUnderCursor ()
+               << endl;
     #endif
-        // HACK: around Qt bug: if you hold a modifier before you start the
-        //                      program and then release it over the view,
-        //                      Qt reports it as the release of an unknown key
-        // --- fall thru and update all modifiers ---
-    case Qt::Key_Alt:
-    case Qt::Key_Shift:
-    case Qt::Key_Control:
-        keyUpdateModifierState (e);
 
+    if (e->isAutoRepeat ())
+    {
+        kdError () << "\tignoring autorep" << endl;
+        return;
+    }
+
+    if (!isDrawKey (e->key ()))
+        return;
+    
+    
+    kpView * const view = viewUnderCursor ();
+    if (!view)
+        return;
+    
+        
+    QMouseEvent me (QEvent::MouseButtonRelease,
+                    view->mapFromGlobal (QCursor::pos ()),
+                    Qt::LeftButton,
+                    0);
+    mouseReleaseEvent (&me);
         e->accept ();
+}
+
+
+void kpTool::keyPressEvent (QKeyEvent *e)
+{
+#if DEBUG_KP_TOOL && 0 || 1
+    kdDebug () << "kpTool::keyPressEvent() key=" << e->key ()
+               << " state=" << e->state () << " stateAfter=" << e->stateAfter ()
+               << " isAutoRep=" << e->isAutoRepeat ()
+               << endl;
+#endif
+
+    e->ignore ();
+
+
+    seeIfAndHandleModifierKey (e);
+    if (e->isAccepted ())
+        return;
+            
+    seeIfAndHandleArrowKeyPress (e);
+    if (e->isAccepted ())
+        return;
+        
+    seeIfAndHandleBeginDrawKeyPress (e);
+    if (e->isAccepted ())
+        return;
+    
+            
+    switch (e->key ())
+    {
+    case Qt::Key_Delete:
+        m_mainWindow->slotDelete ();
         break;
 
     case Qt::Key_Escape:
@@ -1317,25 +1389,32 @@ void kpTool::keyReleaseEvent (QKeyEvent 
         }
 
         break;
+    }
+}
 
-    case Qt::Key_Enter:
-    case Qt::Key_Insert:
-    {
-        kpView *view = viewUnderCursor ();
-    // TODO: what's the 5 key called?
-        if (view)
+void kpTool::keyReleaseEvent (QKeyEvent *e)
         {
-            QMouseEvent me (QEvent::MouseButtonRelease,
-                            view->mapFromGlobal (QCursor::pos ()),
-                            Qt::LeftButton,
-                            Qt::LeftButton);
-            mouseReleaseEvent (&me);
-            e->accept ();
-        }
-        break;
-    }}
+    // TODO: This does not work on celery!  e->key() is always 0 :(
+#if DEBUG_KP_TOOL && 0 || 1
+    kdDebug () << "kpTool::keyReleaseEvent() key=" << e->key ()
+               << " state=" << e->state () << " stateAfter=" << e->stateAfter ()
+               << " isAutoRep=" << e->isAutoRepeat ()
+               << endl;
+#endif
+
+    e->ignore ();
+
+    
+    seeIfAndHandleModifierKey (e);
+    if (e->isAccepted ())
+        return;
+            
+    seeIfAndHandleEndDrawKeyPress (e);
+    if (e->isAccepted ())
+        return;
 }
 
+
 // private
 void kpTool::keyUpdateModifierState (QKeyEvent *e)
 {
@@ -1339,7 +1418,7 @@ void kpTool::keyReleaseEvent (QKeyEvent 
 // private
 void kpTool::keyUpdateModifierState (QKeyEvent *e)
 {
-#if DEBUG_KP_TOOL && 0
+#if DEBUG_KP_TOOL && 0 || 1
     kdDebug () << "kpTool::updateModifierState() e->key=" << e->key () << endl;
     kdDebug () << "\tshift="
                << (e->stateAfter () & Qt::ShiftButton)
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolflowbase.cpp head/kolourpaint/tools/kptoolflowbase.cpp
--- base/kolourpaint/tools/kptoolflowbase.cpp	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolflowbase.cpp	2005-06-24 00:00:38.000000000 +1000
@@ -28,16 +28,16 @@
 
 #define DEBUG_KP_TOOL_FLOW_BASE 0
 
+
 #include <kptoolflowbase.h>
 
+#include <cstdlib>
+
 #include <qapplication.h>
 #include <qbitmap.h>
 #include <qcursor.h>
 #include <qimage.h>
 #include <qpainter.h>
-#if DEBUG_KP_TOOL_FLOW_BASE
-    #include <qdatetime.h>
-#endif
 
 #include <kdebug.h>
 #include <klocale.h>
@@ -216,31 +216,48 @@ void kpToolFlowBase::hover (const QPoint
     setUserShapePoints (point);
 }
 
-QValueVector <QPoint> kpToolFlowBase::interpolatePoints (const QRect &rect/*TODO:take me away*/,
-    const QPoint &thisPoint, const QPoint &lastPoint)
+static int randomNumberFrom0to99 ()
+{
+    return (rand () % 100);
+}
+
+QValueVector <QPoint> kpToolFlowBase::interpolatePoints (const QPoint &thisPoint,
+    const QPoint &lastPoint,
+    double probability)
 {
     QValueVector <QPoint> ret;
     
+    const int probabilityTimes100 = int (probability * 100);
+#define SHOULD_DRAW()  (probabilityTimes100 == 100/*avoid rand() call*/ ||  \
+                        ::randomNumberFrom0to99 () < probabilityTimes100)
+
+#if 0                        
+    kdDebug () << "prob=" << probability
+               << " *100=" << probabilityTimes100
+               << endl;
+#endif
+
+
     // Sweeps a pixmap along a line (modified Bresenham's line algorithm,
     // see MODIFIED comment below).
     //
     // Derived from the zSprite2 Graphics Engine
 
-    const int x1 = (thisPoint - rect.topLeft ()).x (),
-                y1 = (thisPoint - rect.topLeft ()).y (),
-                x2 = (lastPoint - rect.topLeft ()).x (),
-                y2 = (lastPoint - rect.topLeft ()).y ();
+    const int x1 = lastPoint.x (),
+              y1 = lastPoint.y (),
+              x2 = thisPoint.x (),
+              y2 = thisPoint.y ();  
 
     // Difference of x and y values
-    int dx = x2 - x1;
-    int dy = y2 - y1;
+    const int dx = x2 - x1;
+    const int dy = y2 - y1;
 
     // Absolute values of differences
-    int ix = kAbs (dx);
-    int iy = kAbs (dy);
+    const int ix = kAbs (dx);
+    const int iy = kAbs (dy);
 
     // Larger of the x and y differences
-    int inc = ix > iy ? ix : iy;
+    const int inc = ix > iy ? ix : iy;
 
     // Plot location
     int plotx = x1;
@@ -249,6 +266,8 @@ QValueVector <QPoint> kpToolFlowBase::in
     int x = 0;
     int y = 0;
 
+    
+    if (SHOULD_DRAW ())
     ret.append (QPoint (plotx, ploty));
     
     
@@ -293,13 +312,18 @@ QValueVector <QPoint> kpToolFlowBase::in
                 // is more than 1 point, of course).  This is in contrast to the
                 // ordinary line algorithm which can create diagonal adjacencies.
 
+                if (SHOULD_DRAW ())
                 ret.append (QPoint (plotx, oldploty));
             }
 
+            if (SHOULD_DRAW ())
             ret.append (QPoint (plotx, ploty));
         }    
     }
     
+            
+#undef SHOULD_DRAW
+
     return ret;
 }
 
@@ -356,29 +380,23 @@ void kpToolFlowBase::draw (const QPoint 
     // sync: remember to restoreFastUpdates() in all exit paths
     viewManager ()->setFastUpdates ();
 
+    QRect dirtyRect;
+    
     if (m_brushIsDiagonalLine ?
             currentPointCardinallyNextToLast () :
             currentPointNextToLast ())
     {
-        drawPoint (thisPoint);
+        dirtyRect = drawPoint (thisPoint);
     }
     // in reality, the system is too slow to give us all the MouseMove events
     // so we "interpolate" the missing points :)
     else
     {
-        QRect rect = QRect (thisPoint, lastPoint).normalize ();
-        rect = neededRect (rect, m_brushPixmap [m_mouseButton].width ());
-    
-        QPixmap pixmap = document ()->getPixmapAt (rect);
-
-        if (drawLine (&pixmap, rect, thisPoint, lastPoint))
-        {
-            document ()->setPixmapAt (pixmap, rect.topLeft ());
-
-            m_currentCommand->updateBoundingRect (rect);
-        }        
+        dirtyRect = drawLine (thisPoint, lastPoint);
     }
 
+    m_currentCommand->updateBoundingRect (dirtyRect);
+
     viewManager ()->restoreFastUpdates ();
     setUserShapePoints (thisPoint);
 }
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolflowbase.h head/kolourpaint/tools/kptoolflowbase.h
--- base/kolourpaint/tools/kptoolflowbase.h	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolflowbase.h	2005-06-23 23:39:04.000000000 +1000
@@ -78,10 +78,11 @@ public:
     virtual void beginDraw ();
     virtual void hover (const QPoint &point);
     
-    QValueVector <QPoint> interpolatePoints (const QRect &rect/*TODO:take me away*/,
-        const QPoint &thisPoint, const QPoint &lastPoint);
+    QValueVector <QPoint> interpolatePoints (const QPoint &thisPoint,
+        const QPoint &lastPoint,
+        double probability = 1.0);
 
-    virtual void drawPoint (const QPoint &point) = 0;
+    virtual QRect drawPoint (const QPoint &point) = 0;
     
     void drawLineSetupPainterMask (QPixmap *pixmap,
         QBitmap *maskBitmap,
@@ -91,8 +92,7 @@ public:
         QPainter *painter, QPainter *maskPainter,
         bool drawingHappened = true);
         
-    virtual bool drawLine (QPixmap *pixmap, const QRect &docRect,
-        const QPoint &thisPoint, const QPoint &lastPoint) = 0;
+    virtual QRect drawLine (const QPoint &thisPoint, const QPoint &lastPoint) = 0;
 
     virtual bool drawShouldProceed (const QPoint & /*thisPoint*/, const QPoint & /*lastPoint*/, const QRect & /*normalizedRect*/) { return true; }
     virtual void draw (const QPoint &thisPoint, const QPoint &lastPoint, const QRect &normalizedRect);
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolflowpixmapbase.cpp head/kolourpaint/tools/kptoolflowpixmapbase.cpp
--- base/kolourpaint/tools/kptoolflowpixmapbase.cpp	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolflowpixmapbase.cpp	2005-06-23 22:56:00.000000000 +1000
@@ -48,7 +48,7 @@ kpToolFlowPixmapBase::~kpToolFlowPixmapB
 }
 
 
-void kpToolFlowPixmapBase::drawPoint (const QPoint & /*point*/)
+QRect kpToolFlowPixmapBase::drawPoint (const QPoint & /*point*/)
 {            
     if (color (m_mouseButton).isOpaque ())
         document ()->paintPixmapAt (m_brushPixmap [m_mouseButton], hotPoint ());
@@ -60,39 +60,43 @@ void kpToolFlowPixmapBase::drawPoint (co
         document ()->slotContentsChanged (hotRect ());
     }
 
-    m_currentCommand->updateBoundingRect (hotRect ());
+    return hotRect ();
 }
 
 
 
-bool kpToolFlowPixmapBase::drawLine (QPixmap *pixmap,
-    const QRect &docRect,
-    const QPoint &thisPoint, const QPoint &lastPoint)
+QRect kpToolFlowPixmapBase::drawLine (const QPoint &thisPoint, const QPoint &lastPoint)
 {
-    QValueVector <QPoint> points = interpolatePoints (docRect,
-        thisPoint, lastPoint);
+    QRect docRect = QRect (thisPoint, lastPoint).normalize ();
+    docRect = neededRect (docRect, m_brushPixmap [m_mouseButton].width ());
+    QPixmap pixmap = document ()->getPixmapAt (docRect);
+
+    
+    QValueVector <QPoint> points = interpolatePoints (thisPoint, lastPoint);
         
     for (QValueVector <QPoint>::const_iterator pit = points.begin ();
          pit != points.end ();
          pit++)
     {
-        const int XXX = (*pit).x (), YYY = (*pit).y ();
+        const QPoint point = hotPoint ((*pit).x (), (*pit).y ()) - docRect.topLeft ();
         
         if (!color (m_mouseButton).isTransparent ())
         {
-            kpPixmapFX::paintPixmapAt (pixmap,
-                hotPoint (XXX, YYY),
+            kpPixmapFX::paintPixmapAt (&pixmap,
+                point,
                 m_brushPixmap [m_mouseButton]);
         }
         else
         {
-            kpPixmapFX::paintMaskTransparentWithBrush (pixmap,
-                hotPoint (XXX, YYY),
+            kpPixmapFX::paintMaskTransparentWithBrush (&pixmap,
+                point,
                 kpPixmapFX::getNonNullMask (m_brushPixmap [m_mouseButton]));
         }
     }
 
-    return true;
+    
+    document ()->setPixmapAt (pixmap, docRect.topLeft ());
+    return docRect;
 }
 
     
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolflowpixmapbase.h head/kolourpaint/tools/kptoolflowpixmapbase.h
--- base/kolourpaint/tools/kptoolflowpixmapbase.h	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolflowpixmapbase.h	2005-06-23 21:42:11.000000000 +1000
@@ -50,10 +50,8 @@ public:
     virtual ~kpToolFlowPixmapBase ();
     
 protected:
-    virtual void drawPoint (const QPoint &point);
-    virtual bool drawLine (QPixmap *pixmap,
-        const QRect &docRect,
-        const QPoint &thisPoint, const QPoint &lastPoint);
+    virtual QRect drawPoint (const QPoint &point);
+    virtual QRect drawLine (const QPoint &thisPoint, const QPoint &lastPoint);
 
 
 };
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptool.h head/kolourpaint/tools/kptool.h
--- base/kolourpaint/tools/kptool.h	2005-06-14 13:55:47.000000000 +1000
+++ head/kolourpaint/tools/kptool.h	2005-06-24 15:06:02.000000000 +1000
@@ -307,6 +307,15 @@ protected:
     virtual void mouseReleaseEvent (QMouseEvent *e);
     virtual void wheelEvent (QWheelEvent *e);
     
+    void seeIfAndHandleModifierKey (QKeyEvent *e);
+    
+    void arrowKeyPressDirection (const QKeyEvent *e, int *dx, int *dy);
+    void seeIfAndHandleArrowKeyPress (QKeyEvent *e);
+    
+    bool isDrawKey (int key);
+    void seeIfAndHandleBeginDrawKeyPress (QKeyEvent *e);
+    void seeIfAndHandleEndDrawKeyPress (QKeyEvent *e);
+    
     virtual void keyPressEvent (QKeyEvent *e);
     virtual void keyReleaseEvent (QKeyEvent *e);
     
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolpen.cpp head/kolourpaint/tools/kptoolpen.cpp
--- base/kolourpaint/tools/kptoolpen.cpp	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolpen.cpp	2005-06-23 22:36:09.000000000 +1000
@@ -57,7 +57,7 @@ QString kpToolPen::haventBegunDrawUserMe
 }
 
 
-void kpToolPen::drawPoint (const QPoint &point)
+QRect kpToolPen::drawPoint (const QPoint &point)
 {
     QPixmap pixmap (1, 1);
 
@@ -79,18 +79,22 @@ void kpToolPen::drawPoint (const QPoint 
     // draw onto doc
     document ()->setPixmapAt (pixmap, point);
 
-    m_currentCommand->updateBoundingRect (point);
+    return QRect (point, point);
 }
 
 
 
-bool kpToolPen::drawLine (QPixmap *pixmap, const QRect &docRect,
-    const QPoint &thisPoint, const QPoint &lastPoint)
+QRect kpToolPen::drawLine (const QPoint &thisPoint, const QPoint &lastPoint)
 {
+    QRect docRect = QRect (thisPoint, lastPoint).normalize ();
+    docRect = neededRect (docRect, m_brushPixmap [m_mouseButton].width ());
+    QPixmap pixmap = document ()->getPixmapAt (docRect);
+
+
     QBitmap maskBitmap;
     QPainter painter, maskPainter;
     
-    drawLineSetupPainterMask (pixmap,
+    drawLineSetupPainterMask (&pixmap,
         &maskBitmap,
         &painter, &maskPainter);
     
@@ -105,12 +109,13 @@ bool kpToolPen::drawLine (QPixmap *pixma
         maskPainter.drawLine (sp, ep);
 
  
-    drawLineTearDownPainterMask (pixmap,
+    drawLineTearDownPainterMask (&pixmap,
         &maskBitmap,
         &painter, &maskPainter);
 
     
-    return true;
+    document ()->setPixmapAt (pixmap, docRect.topLeft ());
+    return docRect;
 }
 
 
diff -ur -x'*.o' -x'*.lo' -x'*.la' -x'*.a' -x'*.moc' -x'.#*' -x'*~' -xMakefile -x'Makefile.[cir]*' -x.deps -x.libs -x'*.orig' -x'*.rej' -x kolourpaintlicense.h -xCVS -xk -xk2 -xk3 -xk4 -xk5 -x.svn -dpbBw -xconfig.log -x requests base/kolourpaint/tools/kptoolpen.h head/kolourpaint/tools/kptoolpen.h
--- base/kolourpaint/tools/kptoolpen.h	2005-06-23 19:29:36.000000000 +1000
+++ head/kolourpaint/tools/kptoolpen.h	2005-06-23 21:44:23.000000000 +1000
@@ -44,9 +44,8 @@ public:
 
 protected:
     virtual QString haventBegunDrawUserMessage () const;
-    virtual void drawPoint (const QPoint &point);
-    virtual bool drawLine (QPixmap *pixmap, const QRect &docRect,
-        const QPoint &thisPoint, const QPoint &lastPoint);
+    virtual QRect drawPoint (const QPoint &point);
+    virtual QRect drawLine (const QPoint &thisPoint, const QPoint &lastPoint);
 };
 
         
