
tools/ package


1. How kpTool's Work
1.1. Drawing Pattern
1.2. Tracking UI Changes
1.3. Status Bar

2. Class Overview
2.1. tools/
2.2. tools/flow/
2.3. tools/polygonal/
2.4. tools/rectangular/
2.5. tools/selections/


1. How kpTool's Work
~~~~~~~~~~~~~~~~~~~~

kpTool is the base class of all tools.

kpView forwards events unchanged to the current tool.  The tool events
lifecycle is as follows:


1.1. Drawing Pattern
--------------------

All tools' constructors are called at program startup by kpMainWindow.  Each
tool creates its kpToolAction.  Each tool is placed into the kpToolToolBar.

When a tool is selected, its begin() method is called.  This method displays
the relevant option widgets (and connects their signals to slots to track
option changes), changes the cursor, changes the statusbar message and
performs other tool-specific initialisation.  When a tool is deselected, its
end() method is called to do the reverse.  hasBegun() returns true in between
begin() and end().

All tools can be selected with single key shortcuts by default, for
convenience.  For instance, 'B' selects the Brush Tool.  ALT+SHIFT+B can
select the Brush Tool when the text tool is active.

globalDraw() is called when the user double clicks on the tool in the Tool
Box (used by e.g. the Eraser, Color Eraser and Zoom tools).  reselect() is
called if the user clicks on an already-selected tool.

When a mouse button is pressed, hasBegunDraw() returns true and mouseButton()
is set to 0 for the left button and 1 for the right button.  This results in
the idiom "1 – mouseButton()" which returns the mouse button _not_ being
pressed.  shiftPressed(), controlPressed() and altPressed() reflect the state
of the keyboard modifiers (note that altPressed() currently does not work).
startPoint() contains the coordinate of the mouse in document coordinates.
beginDraw() is called.  Generally, the left button draws in the
foregroundColor() and the right button draws in the backgroundColor() but
this is up to the tool.  The middle mouse button pastes text from the
clipboard.

There is some support for drawing with the keyboard using the numpad but it
is quite rough.

Immediately after beginDraw() is called, draw() will be called.  As long as
the mouse stays down, draw() is also called every time the mouse is
dragged, a keyboard modifier is changed (if careAboutModifierState() is
reimplemented) or for any other update KolourPaint feels like.  While
startPoint() will be unchanged from beginDraw(), currentPoint() will be
modified to reflect the current document coordinate of the mouse and
currentViewPoint() will be the current view coordinate.
lastPoint() will be the value of currentPoint() on the previous call to
draw() or (-1,-1) if this is the first call to draw() after beginDraw().
Note that (-1,-1) is always an invalid document coordinate for a start
point (after all, how could you possibly click there?) but is valid for the
current point (you could drag to there).  Note that these fields are also
valid during beginDraw().

For most tools, draw() will create a kpTempImage containing the shape
being drawn and send it to kpViewManager to display as a temporary layer on
top of the document.  The contents of the kpTempImage is usually based on the
part of the document covered by the rectangular bounding rectangle
of the shape (see kpDocument::getImageAt()).

After releasing the mouse button, endDraw() is called, the drag is
considered complete and hasBegunDraw() returns false.  endDraw() should
erase the kpTempImage and add the command to the command history,
committing the shape-drawing operation.  The command will usually use
kpDocument::setImageAt() to effectively "paste down" the kpTempImage.  The
respective command can be found under the command/tools/ hierarchy.

Instead of releasing the mouse button that initiated the drag, the user may
press the other mouse button while the initiating mouse button is still
held down.  cancelShape() is called to cancel the operation – it should
erase the kpTempIMage but not commit to the command history.

releasedAllButtons() is called when no mouse buttons are no longer held.
This is for updating the status bar message.  Consider the case where
beginDraw() has been called due to a left mouse press.  If the right mouse
button is then pressed, while still holding down the left, cancelShape()
will be called.  But after that, as long as at least one button remains
depressed, no matter what buttons are pressed or released or how the mouse is
moved, no drawing methods are called.  Only after all buttons are released,
will releasedAllButtons() be called and the tool starts recognising events
again.

hover() is called when the mouse is moved over the view but differs from
draw(), in that hover() is only called outside of a draw operation i.e.
when hasBegunDraw() returns false and equivalently, when no buttons are being
pressed.

A shape that is constructed by multiple, separate drags, rather
than a single drag can use an extension of the "drawing pattern" by
implementing hasBegunShape(), beginShape() and endShape().  There can be
arbitrarily many beginDraw() and endDraw() sequences between each beginShape()
and endShape().  Polygon, Polyline and Curve use this feature as expected.
kpToolText abuses this to support text on top of regular selection operations.

If hasBegunShape(), endShape() will always be called before end().
Otherwise, if hasBegunDraw(), endDraw() will always be called before end().
This simplifies the end() logic for reimplementations.


1.2. Tracking UI Changes
------------------------

You can override several methods to return true, for extra behavior:

  1. returnToPreviousToolAfterEndDraw()

  2. careAboutModifierState(): if returns "true", it calls draw() whenever
     a modifier key (e.g. CTRL, SHIFT or ALT) is pressed.  This is needed
     by tools that react to such keys, else the tool will not know until
     the next mouse move (which calls draw() or hover()).

  3. careAboutColorsSwapped()

You can reimplement some methods that do nothing by default to catch events:

  slotColorsSwapped ()
  slotForegroundColorChanged ()
  slotBackgroundColorChanged ()
  slotColorSimilarityChanged (}


1.3. Status Bar
---------------

TODO: Expand content

setUserMessage() sets the string to be displayed as the first field in the
statusbar, which gives the user instructions on what to do next e.g.
“Curve: Drag out the start and end points” or “Curve: Left drag to set the
first control point or right click to finish”.  This can be empty but never
should be because instructions should always be available.

setUserShapePoints() can be passed 0, 1 and 2 points and this determines
what is displayed in the second field of the statusbar:

  0 points: mouse is outside of all views, display nothing

  1 point : mouse is moving inside view or drawing with a flow tool (e.g.
            Pen), show that currrent point

  2 points: user is dragging out a shape from a start point to and end point,
            show these 2 points separated by a dash e.g. the start and end
            points of a line.  This automatically calls setUserShapeSize()
            with the calculated size of the shape with these points (can have
            negative components for a left and/or up drag).  You can disable
            this automatic call by disabling the "setSize" argument.

setUserShapeSize() is passed the size of the current drag (can have
negative components for a left and/or up drag) and is displayed in the
third field.  If this is KP_INVALID_SIZE, no drawing is happening and it
displays nothing.  Note that QSize() is not KP_INVALID_SIZE as QSize() is
actually a legal size for northwest mouse drag (-1x-1).


2. Class Overview
~~~~~~~~~~~~~~~~~

2.1. tools/
-----------

[>>>] kpToolColorPicker


[>>>] kpToolFloodFill


[>>>] kpToolZoom


Historically, in KolourPaint/KDE3, tools did not have clean inheritance
hierarchies -- must notably the abuse of kpToolPen serving as multiple
classes depending on the "m_mode" field.


2.2. tools/flow/
----------------

                              kpTool
                                ^
                                |
                                |
                                |
                           kpToolFlowBase
                           ^    ^    ^   ^
                          /     |     \    \
                        /       |       \     \
     kpToolFlowPixmapBase       |         \      \
          ^       ^             |           \       \
          |       |     kpToolColorEraser     \        \
         /         \                       kpToolPen      \
       /             \                               kpToolSpraycan
  kpToolBrush   kpToolEraser


2.3. tools/polygonal/
---------------------

                              kpTool
                                ^
                                |
                                |
                                |
                        kpToolPolygonalBase
                        ^     ^    ^       ^
                       /      |    |        \
                     /        |    |          \
                   /          |    |            \
             kpToolCurve      |    |      kpToolPolyline
                              |    |
                       kpToolLine  |
                                   |
                             kpToolPolygon


2.4. tools/rectangular/
-----------------------

                               kpTool
                                 ^
                                 |
                                 |
                                 |
                        kpToolRectangularBase
                        ^        ^          ^
                       /         |           \
                     /           |             \
                   /             |               \
           kpToolRectangle       |          kpToolEllipse
                                 |
                        kpToolRoundedRectangle


2.5. tools/selections/
----------------------

                             kpAbstractSelectionTool
                             ^                     ^
                            /                       \
                          /                           \
                        /                         kpToolText
            kpAbstractImageSelectionTool
            ^           ^              ^
            |           |              |
    kpToolRectSelection |  kpToolFreeFormSelectoin
                        |
             kpToolEllipticalSelection